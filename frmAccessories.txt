Option Explicit
'Jos gridistä grdOther poistetaan varusteita niin täältä poistuttaessa memAPL7a(23) ja OtherGridLineCount kertovat lopullisen varustemäärän
'gridissä ja memAPL7a(24)...(28), (29)...(33) jne. sisältävät varusteiden tiedot, lukuunottamatta koodia. Vektoria memAPL7a ei kuitenkaan
'siivota poistuttaessa joten sinne voi jäädä kummittelemaan em. varusteiden perään muitakin mikäli gridistä oli poistettu varusteita!
'sItemCode sisältää koodit niiltä varusteilta joilla sellainen on, siis MDS-kannassa olevat.

Dim sConnectorCodes() As String
Dim CSet1 As String
Dim CSet2 As String
Dim OLTCset21 As String
Dim OLTCset22 As String
Dim OLTCvanhat As String
Dim BushingFocus As Integer
Dim OtherGridFocus As Integer
Dim nCurrentMessageRowA As Integer
Dim bAllowSetFocus As Boolean
Dim bAddSunRoof As Boolean
Dim bRemoveSunRoof As Boolean
Dim TooMany As Boolean
Dim bOLTCsetClicked As Boolean 'onko cmbAccessories-listassa valittu käämikytkinsetti?

' Name      : Update_memAPL7a()
' Parameters:
' Purpose   : Update memory buffer when updating accessories
' Notes     :
Sub Update_memAPL7a()
  Dim i As Integer
  Dim iOffset As Integer
  Dim iRowIndex As Integer
  
  For i = 1 To 3
    memAPL7a2(i) = Trim(cmbAPL7a2(i).text)
  Next i
  
  For i = 1 To maxfieldA
    memAPL7a(i) = tAPL7A(i)
  Next i

  iRowIndex = 1
  memAPL7a(maxfieldA + 1) = str$(OtherGridLineCount)

  For i = (maxfieldA + 2) To ((maxfieldA + 2) + (OtherGridLineCount - 1) * 5) Step 5
    For iOffset = 0 To 4
        memAPL7a(i + iOffset) = OtherGridLineBuffer(iRowIndex, iOffset + 1)
    Next iOffset
    iRowIndex = iRowIndex + 1
  Next i

End Sub

' Name      : Update_tAPL7a()
' Parameters:
' Purpose   : Update text fields
' Notes     :
Sub Update_tAPL7a()
  Dim i As Integer
  Dim iOffset As Integer
  Dim iRowIndex As Integer
  
  For i = 1 To 3
    cmbAPL7a2(i).text = ""
    cmbAPL7a2(i).text = Trim(memAPL7a2(i))
  Next i
  
  For i = 1 To maxfieldA
    tAPL7A(i).text = ""
    tAPL7A(i).text = Trim(memAPL7a(i))
  Next i
  
  DoEvents

  iRowIndex = 1
  OtherGridLineCount = Val(memAPL7a(maxfieldA + 1))
  
  For i = (maxfieldA + 2) To ((maxfieldA + 2) + (OtherGridLineCount - 1) * 5) Step 5
    For iOffset = 0 To 4
        OtherGridLineBuffer(iRowIndex, iOffset + 1) = memAPL7a(i + iOffset)
    Next iOffset
    iRowIndex = iRowIndex + 1
  Next i
  
  If OtherGridLineCount >= 1 Then
    UpdateOtherGrid
  Else
    InitOtherGrid
  End If
  
End Sub

Private Sub cmbAccessoriesSubset_Click()
  Dim CName As String
  Dim FocusIndexOrig As Integer
  Dim iSubset As Integer
  Dim iX As Integer

  If NoAction Then Exit Sub
  
  NoAction = True
  Screen.MousePointer = vbHourglass
  
  ConnectToLDTNetDB "frmAccessories.cmbAccessoriesSubset_Click"
  ConnectToAccessoryDB "frmAccessories.cmbAccessoriesSubset_Click"

  'näytetään varustesetin valittu alaluokka gridissä grdAccessories
  iSubset = cmbAccessoriesSubset.listIndex + 1
  FillAccessoriesGrid2 iSubset

  DisconnectLDTNetDB "frmAccessories.cmbAccessoriesSubset_Click"
  DisconnectAccessoryDB "frmAccessories.cmbAccessoriesSubset_Click"
  
  'jos varustesetin nimessä CName on pilkku niin tiedetään että kyseessä on jompikumpi käämikytkinsetti
  CName = cmbAccessories.List(cmbAccessories.listIndex)
  iX = InStr(CName, ",")
  If iX > 0 Then
    CName = Left(CName, (iX - 1))
    bOLTCsetClicked = True
  End If

  If OtherGridFocus = True Then
    Screen.MousePointer = vbDefault
    NoAction = False
    Exit Sub
  End If
  
  FocusIndexOrig = FocusIndex
  FocusIndex = -1

  For iX = 2 To 22 Step 2
    If CName = lbl7A(iX).caption Then
        'ilman tätä näytölle tultaessa cmbAccessories näyttää läpivientejä mutta focus on grdOtherissa...  muita syitä?
        If FocusIndexOrig = 4 Or FocusIndexOrig = 6 Then
            FocusIndex = FocusIndexOrig
        Else
            FocusIndex = iX
        End If
        Exit For
    End If
  Next iX

  If FocusIndex = -1 Then
    FocusIndex = 100
    OtherGridFocus = True
  Else
    If bAllowSetFocus Then frmAccessories.tAPL7A(FocusIndex).SetFocus
  End If

  Screen.MousePointer = vbDefault
  NoAction = False

End Sub

Private Sub cmbAPL7a2_Change(Index As Integer)
  
  cmbAPL7a2(Index).ForeColor = &H80000008
  AccessoryChangesMade = True
  clbCost

End Sub

Private Sub cmbAPL7a2_Click(Index As Integer)

  cmbAPL7a2(Index).ForeColor = &H80000008
  
  If cmbAPL7a2(Index).listIndex > 0 Then
    If iAccessorySourceDB = 1 Then
          
    Else
        sItemCodea2(Index) = sConnectorCodes(cmbAPL7a2(Index).listIndex)
    End If
  End If
  
  If cmbAPL7a2(Index).text = "<Empty>" Then
    cmbAPL7a2(Index).text = ""
    memAPL7a2(Index) = ""
    sItemCodea2(Index) = ""
  End If
  
  AccessoryChangesMade = True
  
  clbCost

End Sub

Private Sub cmbAPL7a2_LostFocus(Index As Integer)

  If Trim$(cmbAPL7a2(Index)) <> "" Then
  
  Else
    If iAccessorySourceDB <> 1 Then
        sItemCodea2(Index) = ""
    End If
  End If

End Sub

Private Sub clbClear_Click()
  Dim i As Integer
  Dim iAnswer As Integer
  Dim iOffset As Integer
  Dim iRowIndex As Integer

  ' Reset accessories

  clbClear.Enabled = False

  iAnswer = MsgBox("Do you really want to clear all accessories?", 36)
  If iAnswer = 6 Then
    Screen.MousePointer = vbHourglass
    For i = 1 To 3
        cmbAPL7a2(i).text = ""
        sItemCodea2(i) = ""
    Next i
    For i = 1 To maxfieldA
        tAPL7A(i).text = ""
        sItemCode(i) = ""
        DoEvents
    Next i
    AccessoryChangesMade = True
    iRowIndex = 1
    OtherGridLineCount = Val(memAPL7a(maxfieldA + 1))
    If OtherGridLineCount >= 1 Then
        For i = (maxfieldA + 2) To ((maxfieldA + 2) + (OtherGridLineCount - 1) * 5) Step 5
            sItemCode(i) = ""
            For iOffset = 0 To 5
                OtherGridLineBuffer(iRowIndex, 1 + iOffset) = ""
            Next iOffset
            iRowIndex = iRowIndex + 1
        Next i
        InitOtherGrid
    End If
    OtherGridLineCount = 0
    panAPL7A(1).caption = "0 "
    Screen.MousePointer = vbDefault
  Else
      clbClear.Enabled = True
  End If

  clbClear.Enabled = True
  Screen.MousePointer = vbDefault

End Sub

Private Sub clbClose_Click()
  Dim iMissing As Boolean
  Dim i As Integer
  
  If NoAction Then Exit Sub
  NoAction = True
  
  ClearMessages
  
  iMissing = False

  If CheckAccessoriesForCode <> 0 And iAccessorySourceDB <> 1 Then
    NoAction = False
    Exit Sub
  End If

  'With OLTC check if the final OLTC for cost calculation has been selected
  If OnLoadTapChanger = 1 Then
    i = 1
    Do
        If tAPL7A(20).text = OLTCVersions(i) Then
            iMissing = True
        End If
        i = i + 1
    Loop Until OLTCVersions(i) = "  "
  End If

  MousePointer = vbArrowHourglass
  For i = 2 To 22 Step 2
    If tAPL7A(i).text > "" Then
      If tAPL7A(i - 1).text = "" Then
        addMessage "Please input number of " & lbl7A(i).caption & " !", MESSAGETYPE_WARNING
        tAPL7A(i - 1).SetFocus
        MousePointer = vbDefault
        NoAction = False
        Exit Sub
      End If
    End If
    If tAPL7A(i - 1).text > "" Then
      If tAPL7A(i).text = "" Or (i = 20 And iMissing = True) Then
        addMessage "Please input Article Number of " & lbl7A(i).caption & " !", MESSAGETYPE_WARNING
        tAPL7A(i).SetFocus
        MousePointer = vbDefault
        NoAction = False
        Exit Sub
      End If
    End If
  Next i
  
  If OnLoadTapChanger = 1 Then
    FinalOLTCSelected = True
  End If
  
  WriteToolboxInputData_Local 'ennen KKLAJI/MLAJIin kirjoitusta etteivät ne resetoidu
  
  If AccessoryChangesMade = True Then
    If TankType = "R" Or TankType = "N" Then
        LoadAPLData 1, 1, "KKLAJI", tAPL7A(20).text, APL_ALL
        LoadAPLData 1, 1, "MLAJI", tAPL7A(22).text, APL_ALL
    End If
    Update_memAPL7a
    'this is used to not try to load default accessory set anymore
    DefaultAccessoriesLoaded = True
    DesignChangesMade = True
    AccessoryChangesMade = False
  End If
    
  If iAccessorySourceDB <> 1 Then
    ConnectToLDTNetDB "frmAccessories.clbClose_Click"
  End If
  
  CreateVLKMIndex
  
  If iAccessorySourceDB <> 1 Then
    DisconnectLDTNetDB "frmAccessories.clbClose_Click"
  End If
    
  If bCostOk = True Then
    '*** UPDATES COST SUMMARY DATA ON frmCost ***
    sError = ""
    UpdateCostSummary
  Else
  End If
    
  SaveDesignToRecoveryFile
  
  Screen.MousePointer = vbDefault
  MousePointer = vbDefault
  gsFormCaptionDefault = gsFormCaptionDefaultCost
  
  Unload Me
  
  GetMaterialData

  If bCostOk = True Then
    On Error Resume Next
    frmCost.GridCosts.SetFocus
    On Error GoTo 0
  End If

  sError = "Cost or UnitCost for item(s) are missing: " & sError

  If Len(sError) > 45 And giCurrentPage > 6 Then
    ShowMessage sError, MESSAGETYPE_WARNING
    sError = ""
  End If
  
  CheckDGAmonitor

  NoAction = False

End Sub

Private Sub clbCost()
  Dim iMissing As Boolean
  Dim i As Integer

  If NoAction Then Exit Sub

  If frmAccessories.Visible = False Then Exit Sub
  
  NoAction = True
  
  ClearMessages
  
  ConnectToLDTNetDB "frmAccessories.clbCost_Click"
  ConnectToAccessoryDB "frmAccessories.clbCost_Click"

  iMissing = False
  If OnLoadTapChanger = 1 Then
    i = 1
    Do
        If tAPL7A(20).text = OLTCVersions(i) Then iMissing = True
        i = i + 1
    Loop Until OLTCVersions(i) = "  "
  End If

  For i = 2 To 22 Step 2
    If tAPL7A(i).text > "" Then
        If tAPL7A(i - 1).text = "" Then
            addMessage "Please input number of " & lbl7A(i).caption & " !", MESSAGETYPE_WARNING
            tAPL7A(i - 1).SetFocus
            NoAction = False
            Exit Sub
        End If
    End If
        If tAPL7A(i - 1).text > "" Then
            If tAPL7A(i).text = "" Or (i = 20 And iMissing = True) Then
                addMessage "Please input Article Number of " & lbl7A(i).caption & " !", MESSAGETYPE_WARNING
                tAPL7A(i).SetFocus
                NoAction = False
                Exit Sub
            End If
        End If
  Next i
  
  AccessorySetCostCalculation
  
  If sTempErrorMessage <> vbNullString Then
    addMessage sTempErrorMessage, MESSAGETYPE_WARNING
    sTempErrorMessage = vbNullString
  End If
  
  DisconnectLDTNetDB "frmAccessories.clbCost_Click"
  DisconnectAccessoryDB "frmAccessories.clbCost_Click"
  
  NoAction = False

End Sub

Private Sub clbDefaultSet_Click()
'Load default accessory set
  Dim i As Integer
  Dim iAnswer As Integer
  Dim iOffset As Integer
  Dim iRowIndex As Integer

  If NoAction Then Exit Sub
  NoAction = True
    
  ClearMessages

  If Len(DefaultAccessorySetCode) = 7 Then
    addMessage "There is not enough calculated data to load default accessory set.", MESSAGETYPE_WARNING
  Else
    iAnswer = MsgBox("Do you really want to load default accessory set named '" & DefaultAccessorySetCode & "'?", 36)
    If iAnswer = 6 Then
        clbClose.Enabled = False
        Screen.MousePointer = vbHourglass
        ConnectToStandardDB "frmAccessories.clbDefaultSet_Click"
        ConnectToLDTNetDB "frmAccessories.clbDefaultSet_Click"
        'Reset all accessories except OLTC and motor drive unit
        For i = 1 To 18
            tAPL7A(i).text = ""
            sItemCode(i) = ""
            DoEvents
        Next i
        iRowIndex = 1
        OtherGridLineCount = Val(memAPL7a(maxfieldA + 1))
        If OtherGridLineCount >= 1 Then
            For i = (maxfieldA + 2) To ((maxfieldA + 2) + (OtherGridLineCount - 1) * 5) Step 5
                sItemCode(i) = ""
                For iOffset = 0 To 5
                    OtherGridLineBuffer(iRowIndex, 1 + iOffset) = ""
                Next iOffset
                iRowIndex = iRowIndex + 1
            Next i
            InitOtherGrid
        End If
        OtherGridLineCount = 0
        panAPL7A(1).caption = "0 "
        Screen.MousePointer = vbDefault
        clbClear.Enabled = True
        Screen.MousePointer = vbDefault
        'load the default accessory set
        AccessorySetCode = DefaultAccessorySetCode
        OpenAccessorySet
        Update_tAPL7a
        AccessoryChangesMade = True
        DisconnectStandardDB "frmAccessories.clbDefaultSet_Click"
        DisconnectLDTNetDB "frmAccessories.clbDefaultSet_Click"
        Screen.MousePointer = vbDefault
        clbClose.Enabled = True
    Else
        NoAction = False
        Exit Sub
    End If
End If

  iAnswer = MsgBox("Generate bushings too?", 36)
  If iAnswer = 6 Then
    If iAccessorySourceDB = 1 Then
      ConnectToAccessoryDB "frmAccessories.clbDefaultSet_Click"
    Else
      ConnectToLDTNetDB "frmAccessories.clbDefaultSet_Click"
    End If
    GenerateBushings
    If iAccessorySourceDB = 1 Then
      DisconnectAccessoryDB "frmAccessories.clbDefaultSet_Click"
    Else
      DisconnectLDTNetDB "frmAccessories.clbDefaultSet_Click"
      End If
  End If
  
  Screen.MousePointer = vbDefault
  MySendKeys ("{TAB}")
  NoAction = False
  
  clbCost

End Sub

Private Sub cmbViewMode_Click()
  cmbAccessories_Click
End Sub

Private Sub cmdMoveToOther_Click()

  OtherGridFocus = True
  TooMany = False
  grdAccessories_DblClick
  If TooMany Then Exit Sub
  clbCost
  
End Sub

Private Sub Form_Activate()
  Dim bWarn As Boolean
  Dim i As Integer
  
  clbCost
  bWarn = False
  For i = 2 To NoOfVoltageSystems
    If Val(ReadAPLData(1, 1, "UM")) >= 72.5 And Val(ReadAPLData(i, 1, "UM")) > 18 Then bWarn = True
  Next i
  If bWarn Then
    addMessage "If DIN-porcelain bushings are used then semi-conductive layer is needed for porcelain bottom part because of PD-test.", MESSAGETYPE_WARNING
  End If
  
End Sub

Private Sub Form_Load()
  Dim i As Integer

  NoAction = True

  WriteLog "frmAccessories.Form_Load()"

  TriggerLCCalc = True
  ClearMessages           'tyhjätään tämän formin messualue
  LSLMain.ClearMessages   'tyhjätään pääformin messualue
  nCurrentMessageRowA = 0
  bRemoveSunRoof = False
  CSet1 = ", set 1"       'käämikytkimien ykkössetin tunnus
  CSet2 = ", set 2"       'käämikytkimien kakkossetin tunnus
  OLTCset21 = "ABB V"     'käämikytkimen kakkossetissä olevat vakuumikytkimet
  OLTCset22 = "MR VV"     'tunnistetaan näistä merkkijonoista
  OLTCvanhat = "ZV"       'ei enää käytössä olevat käämikytkimet
  bOLTCsetClicked = False

  MousePointer = vbHourglass
  
  gsFormCaptionDefault = "Accessories"
  frmAccessories.caption = App.Title & " - [" & gsFormCaptionDefault & " - " & gsFormCaptionDetail & "]"
  
  If iAccessorySourceDB <> 1 Then
    MousePointer = vbHourglass
    ConnectToLDTNetDB "frmAccessories.Form_Load"
  End If
  ConnectToStandardDB "frmAccessories.Form_Load"
  ConnectToAccessoryDB "frmAccessories.Form_Load"
  
  'Place form
  frmAccessories.Top = LSLMain.Top + (LSLMain.height - frmAccessories.height) / 2
  frmAccessories.Left = LSLMain.Left + (LSLMain.width - frmAccessories.width) / 2

  FillAccessoriesCombo
  cmbAccessories.listIndex = 0
  
  'Load values to archorn and connector combos
  MousePointer = vbHourglass
  
  If iAccessorySourceDB <> 1 Then
    DisconnectLDTNetDB "frmAccessories.Form_Load"
  End If
  DisconnectAccessoryDB "frmAccessories.Form_Load"
  
  Update_tAPL7a
    
  If NoOfVoltageSystems = 3 Then    'enable labels&fields for the third bushing and connector
    lbl7A(55).Visible = True
    lbl7A(6).Visible = True
    tAPL7A(5).Visible = True
    tAPL7A(6).Visible = True
    Label4(2).Visible = True
    cmbAPL7a2(3).Visible = True
  End If
  
  NoAction = False
  AccessoryChangesMade = False
  
  bAllowSetFocus = False
  If iAccessorySourceDB = 2 Then  ' --> cmbViewMode_Click --> cmbAccessories_Click --> FillAccessoriesGrid2
    With cmbViewMode
        .AddItem "BA ArticleNumber+Name+Description"
        .AddItem "Local1 ArticleNumber+Name+Description"
        .AddItem "Local2 ArticleNumber+Name+Description"
        .listIndex = 2
        .Visible = True
    End With
  End If
  bAllowSetFocus = True
  
  Screen.MousePointer = vbHourglass

  NoAction = True
  Update_tAPL7a
  frmAccessories.cmbAccessories.text = "Bushing"
  NoAction = False
 
  If iAccessorySourceDB <> 1 Then
    ConnectToLDTNetDB "frmAccessories.Form_Load"
  End If
  
  'Generate the default accessory set name DefaultAccessorySetCode and load default accessories, if possible
  GenerateAccessorySetCode
  Screen.MousePointer = vbHourglass
  DefaultAccessorySetCode = AccessorySetCode
  Select Case TankType
  Case "R", "N"  'radiator tank transformer
    If DefaultAccessoriesLoaded = False And Len(AccessorySetCode) > 7 Then
        DefaultAccessoriesLoaded = True
        Screen.MousePointer = vbHourglass
        OpenAccessorySet
        Update_tAPL7a
        GenerateBushings
        AccessoryChangesMade = True
    Else
        If DefaultAccessoriesLoaded = False Then
            If Len(AccessorySetCode) = 7 Then
                addMessage "There is not enough calculated data to load default accessory set for radiator transformer.", MESSAGETYPE_WARNING
            End If
        End If
    End If

  Case "C" 'corrugated tank transformer
    If DefaultAccessoriesLoaded = False And Len(AccessorySetCode) > 7 Then
        DefaultAccessoriesLoaded = True
        OpenAccessorySet
        Update_tAPL7a
        GenerateBushings
        AccessoryChangesMade = True
    Else
        If DefaultAccessoriesLoaded = False Then
            If Len(AccessorySetCode) = 7 Then
                addMessage "There is not enough calculated data to load default accessory set for corrugated transformer.", MESSAGETYPE_WARNING
            End If
        End If
    End If
  End Select

  For i = 1 To 3
    If sItemCodea2(i) <> "" Then
      cmbAPL7a2(i).text = Trim(memAPL7a2(i))
    End If
  Next i
    
  If iAccessorySourceDB <> 1 Then
    DoEvents
    FillConnectorCombos2
    DisconnectLDTNetDB "frmAccessories.Form_Load"
  End If
  DisconnectStandardDB "frmAccessories.Form_Load"
  
  Screen.MousePointer = vbDefault
  MousePointer = vbDefault
  DoEvents
  SkipMe = False
  
  clbCost

  NoAction = False
  FocusIndex = 2

End Sub

Private Sub grdOther_Click()

  AccessoryChangesMade = True
  
End Sub

Private Sub grdOther_DblClick()

  RemoveOtherGridLine grdOther.row
  clbCost
  AccessoryChangesMade = True
  
End Sub

Private Sub grdOther_GotFocus()

  FocusIndex = 1000
  OtherGridFocus = True
  
End Sub

Sub FillAccessoriesCombo()
'Luetaan kaikkien varusteluokkien nimet Accessor_30-kannasta ja laitetaan ne cmbAccessories-comboboxiin.
'Samalla täytetään standardivarustekenttien labelit ko. luokkien nimillä. Käämikytkimillä comboboxiin
'laitetaan kaksi settiä!
  Dim CName As String
  Dim i As Integer
  Dim AccessoriesSet As DAO.Recordset
  Dim AccessoriesSetADO As ADODB.Recordset

  cmbAccessories.Clear
  
  SQLQuery$ = "SELECT DISTINCT * From Names"
  
  If useSQLServer = True Or useAccessADO = True Then 'SQL -kanta
    
    Set AccessoriesSetADO = New ADODB.Recordset
    AccessoriesSetADO.Open SQLQuery$, AccessoriesdbADO, adOpenKeyset
    
    AccessoriesSetADO.MoveFirst
    AccessoriesSetADO.Find "Class = '1'", , adSearchForward
    cmbAccessories.AddItem AccessoriesSetADO("Name")
    lbl7A(2).caption = AccessoriesSetADO("Name")
    lbl7A(4).caption = AccessoriesSetADO("Name")
    lbl7A(6).caption = AccessoriesSetADO("Name")
    
    i = 1
    Do
        i = i + 1
        AccessoriesSetADO.MoveFirst
        AccessoriesSetADO.Find "Class = '" & Trim(str(i)) & "'", , adSearchForward
        If AccessoriesSetADO.BOF Or AccessoriesSetADO.EOF Then
        Else
            CName = AccessoriesSetADO("Name")
            If i = 8 Then
                cmbAccessories.AddItem CName & CSet1
                cmbAccessories.AddItem CName & CSet2
            Else
                cmbAccessories.AddItem CName
            End If
            If i <= 9 Then lbl7A(2 * i + 4).caption = CName
        End If
    Loop Until i = 30
    
    AccessoriesSetADO.Close
    
  Else ' access-kanta
  
    Set AccessoriesSet = Accessoriesdb.OpenRecordset(SQLQuery$, dbOpenSnapshot)
    
    AccessoriesSet.FindFirst "Class = '1'"
    cmbAccessories.AddItem AccessoriesSet("Name")
    lbl7A(2).caption = AccessoriesSet("Name")
    lbl7A(4).caption = AccessoriesSet("Name")
    lbl7A(6).caption = AccessoriesSet("Name")
    
    i = 1
    Do
        i = i + 1
        AccessoriesSet.FindFirst "Class = '" & Trim(str(i)) & "'"
        If AccessoriesSet.NoMatch = False Then
            CName = AccessoriesSet("Name")
            If i = 8 Then
                cmbAccessories.AddItem CName & CSet1
                cmbAccessories.AddItem CName & CSet2
            Else
              'If i = 20 Then  'poistetaan
              '                'poistetaan
              'Else            'poistetaan
                cmbAccessories.AddItem CName
              'End If          'poistetaan
            End If
            If i <= 9 Then lbl7A(2 * i + 4).caption = CName
        End If
    Loop Until i = 30
    
    AccessoriesSet.Close
  
  End If

End Sub

Private Sub cmbAccessories_Click()
  Dim CName As String
  Dim FocusIndexOrig As Integer
  Dim iSubset As Integer
  Dim iX As Integer

  If NoAction Then Exit Sub
  
  NoAction = True
  Screen.MousePointer = vbHourglass
  
  ConnectToLDTNetDB "frmAccessories.cmbAccessories_Click"
  ConnectToAccessoryDB "frmAccessories.cmbAccessories_Click"

  'jos valitulla varustesetillä on alaluokkia niin näytetään niiden nimet listboxissa cmbAccessoriesSubset
  cmbAccessoriesSubset.Clear
  CName = cmbAccessories.List(cmbAccessories.listIndex)
  Select Case CName
  Case "Bushing"
    cmbAccessoriesSubset.AddItem "Porcelain <= 73 kV"
    cmbAccessoriesSubset.AddItem "Porcelain > 73 kV"
    cmbAccessoriesSubset.AddItem "Silicone <= 73 kV"
    cmbAccessoriesSubset.AddItem "Silicone > 73 kV"
    cmbAccessoriesSubset.AddItem "Plug-in"
    cmbAccessoriesSubset.AddItem "Oil-oil"
    'cmbAccessoriesSubset.AddItem "Alamo"
    cmbAccessoriesSubset.listIndex = 0
    iSubset = 1
  Case Else
    iSubset = -1
  End Select

  'näytetään gridissä grdAccessories varustesetti tai sen alaluokka
  FillAccessoriesGrid2 iSubset

  DisconnectLDTNetDB "frmAccessories.cmbAccessories_Click"
  DisconnectAccessoryDB "frmAccessories.cmbAccessories_Click"
  
  'jos varustesetin nimessä CName on pilkku niin tiedetään että kyseessä on jompikumpi käämikytkinsetti
  iX = InStr(CName, ",")
  If iX > 0 Then
    CName = Left(CName, (iX - 1))
    bOLTCsetClicked = True
  End If

  If OtherGridFocus = True Then
    Screen.MousePointer = vbDefault
    NoAction = False
    Exit Sub
  End If
  
  FocusIndexOrig = FocusIndex
  FocusIndex = -1

  For iX = 2 To 22 Step 2
    If CName = lbl7A(iX).caption Then
        'ilman tätä näytölle tultaessa cmbAccessories näyttää läpivientejä mutta focus on grdOtherissa...  muita syitä?
        If FocusIndexOrig = 4 Or FocusIndexOrig = 6 Then
            FocusIndex = FocusIndexOrig
        Else
            FocusIndex = iX
        End If
        Exit For
    End If
  Next iX

  If FocusIndex = -1 Then
    FocusIndex = 100
    OtherGridFocus = True
  Else
    If bAllowSetFocus Then frmAccessories.tAPL7A(FocusIndex).SetFocus
  End If

  Screen.MousePointer = vbDefault
  NoAction = False

End Sub

Public Sub UpdateOtherGridItemCodes()
'Päivitetään sItemCode:t ja memAPL7a:t kun varuste on deletoitu Others-gridistä.
'Kutsuvassa mokkulassa RemoveOtherGridLine on jo pienennetty OtherGridLineCount-arvoa yhdellä ja
'tyhjätty poistetun varusteen sItemCode.
  Dim i As Integer
  
  If OtherGridLineCount > 0 Then
    For i = 0 To OtherGridLineCount + 1
        If sItemCode(24 + (i * 5)) = "" Then
            sItemCode(24 + (i * 5)) = sItemCode(24 + ((i + 1) * 5))
            sItemCode(24 + ((i + 1) * 5)) = ""
            memAPL7a(24 + (i * 5)) = memAPL7a(24 + ((i + 1) * 5))
            memAPL7a(24 + ((i + 1) * 5)) = ""
        End If
    Next i
  End If

End Sub

Private Function CheckAccessoriesForCode()
' check that there are no accessories selected without an Item Code
' because of compatibility with old designs
' function returns 0 if ok,
'                  1 if not ok, also prints msgbox with failed accessories
  Dim i As Long
  Dim iIsOk As Long
  Dim sMsg As String
  
  iIsOk = 0
  sMsg = "Item codes not found for following accessories. Please reselect." & vbNewLine & vbNewLine

  For i = 2 To 22 Step 2
    If (sItemCode(i) = "[No Record]") Or (sItemCode(i) = "[Not Found]") Then
        iIsOk = 1
        Select Case i
        Case 2, 4, 6
           sMsg = sMsg & vbTab & vbTab & "[" & i / 2 & ". Bushing] " & vbTab
        Case 8
           sMsg = sMsg & vbTab & vbTab & "[Silicagel Breather] " & vbTab
        Case 10
           sMsg = sMsg & vbTab & vbTab & "[Oil Level Indicator] " & vbTab
        Case 12
           sMsg = sMsg & vbTab & vbTab & "[Buchholz Relay] " & vbTab
        Case 14
           sMsg = sMsg & vbTab & vbTab & "[Oil Thermometer] " & vbTab
        Case 16
           sMsg = sMsg & vbTab & vbTab & "[Terminal Box] " & vbTab
        Case 18
           sMsg = sMsg & vbTab & vbTab & "[Base Rollers] " & vbTab
        Case 20
           sMsg = sMsg & vbTab & vbTab & "[OLTC] " & vbTab
        Case 22
           sMsg = sMsg & vbTab & vbTab & "[Motor Drive Unit] " & vbTab
        End Select
        sMsg = sMsg & memAPL7a(i) & vbNewLine
    End If
  Next i

  For i = 24 To (24 + 5 * (OtherGridLineCount)) Step 5
    If (sItemCode(i) = "[No Record]") Or (sItemCode(i) = "[Not Found]") Then
        sMsg = sMsg & vbTab & vbTab & "[Other] " & vbTab & memAPL7a(i) & vbNewLine
        iIsOk = 1
    End If
  Next i
  
  If iIsOk = 1 Then
    addMessage "Accessory item code check - " & sMsg, MESSAGETYPE_ERROR
  End If
  
  CheckAccessoriesForCode = iIsOk

End Function

Public Sub GenerateBushings()
  Dim i As Integer
  Dim iFactory As Integer
  Dim sTemp As String
  Dim bErr As Boolean
  
  bErr = False
  Screen.MousePointer = vbHourglass
  
  For i = 1 To NoOfVoltageSystems
    ' bushing
    On Error GoTo errorhandler
    sTemp = GetBushing(i)
    On Error GoTo 0
    If Mid(sTemp, 1, 4) = "__2x" Then
        iFactory = 2
        tAPL7A(2 * i).text = Mid(sTemp, 5)
        If iAccessorySourceDB <> 1 And Mid(sTemp, 5) <> "" Then sItemCode(2 * i) = FetchCurrentCode(Mid(sTemp, 5))
    Else
        iFactory = 1
        tAPL7A(2 * i).text = sTemp
        If iAccessorySourceDB <> 1 Then sItemCode(2 * i) = FetchCurrentCode(sTemp)
    End If
      
    ' number of bushings
    sTemp = GetNumberOfBushing(i, iFactory)
    If sTemp = "0" Then
        tAPL7A(i + (i - 1)).text = ""
        bErr = True
    Else
        tAPL7A(i + (i - 1)).text = sTemp
    End If
  Next i
  
  If bErr Then frmAccessories.addMessage "Cannot generate all number of bushings.", MESSAGETYPE_WARNING

Exit Sub

errorhandler:
  frmAccessories.addMessage "Error generating bushings!", MESSAGETYPE_ERROR
  Screen.MousePointer = vbHourglass
  On Error GoTo 0
  
End Sub

Private Function GetNumberOfBushing(iSec As Integer, iFac As Integer)
  Dim iNbr As Integer
  
  Select Case ReadAPLData(iSec, 1, "KAM")
  Case 1, 2, 3, 7, 8
    iNbr = 3
  Case 4
    iNbr = 2
  Case 5
    iNbr = 2
  Case 6
    iNbr = 1
  End Select
  
  If ReadAPLData(iSec, 2, "KAM") = 1 Then
    iNbr = iNbr + 1
  End If
  
  GetNumberOfBushing = iNbr * iFac

End Function

Private Function GetBushing(iVoltageSystem As Integer)
' Return article number of default bushing by voltage system. Empty string if not found.
  Dim sBushing As String
  Dim sBushing2 As String
  Dim sBushing3 As String
  Dim sBushing4 As String
  Dim dNominalVoltage As Double
  Dim dPhaseCurrent As Double
  
  dNominalVoltage = ReadAPLData(iVoltageSystem, 1, "UM")
  If ReadAPLData(iVoltageSystem, 3, "INM2") = 0 Then
    dPhaseCurrent = ReadAPLData(iVoltageSystem, 3, "INM")
  Else
    dPhaseCurrent = Max(ReadAPLData(iVoltageSystem, 3, "INM"), ReadAPLData(iVoltageSystem, 3, "INM2"))
  End If
  dPhaseCurrent = dPhaseCurrent * 1.2  '4.7.2018: käytetään virran varmuuskerrointa 1.2 oletusläpiviennin valinnassa
  
  sBushing = ""
  sBushing2 = ""
  sBushing3 = ""
  sBushing4 = ""
  
  If dNominalVoltage <= 1.1 Then
    sBushing = "DT "
    sBushing2 = "DT1250"
    sBushing3 = "DT2000"
    sBushing4 = "DT3150"
  ElseIf dNominalVoltage <= 4 Then
    sBushing = "DT3N"
    sBushing2 = "COMEM3/4500"
  ElseIf dNominalVoltage <= 12 Then
    sBushing = "DT10NF"
    sBushing2 = "NLTD12B"
  ElseIf dNominalVoltage <= 24 Then
    sBushing = "DT20NF"
    sBushing2 = "NLTD24B"
  ElseIf dNominalVoltage <= 36 Then
    sBushing = "DT30NF"
    sBushing2 = "NLTD30B"
  ElseIf dNominalVoltage <= 52 Then
    sBushing = "NLTL 52A 630"
    sBushing2 = "NLTL 52B 1000"
  End If
  'If dNominalVoltage > 52 And dNominalVoltage <= 73 Then
  '  sBushing = "??????"
  '  sBushing2 = "??????"
  'End If
  
  sBushing = CheckForBushing2(sBushing, sBushing2, sBushing3, sBushing4, dPhaseCurrent)
  GetBushing = sBushing

End Function

Private Function ParseLocal2(sNbr As String, i As Integer)
' Etsii merkkijonosta kaksi lukua apu1 ja apu2. Molemmat tulevat oikein jos niiden välistä löytyy
' N-kirjain. Jos ei ole, niin apu1:ssä on molemmat luvut yhteenkirjoitettuna ja apu2:ssa toinen luku!
  Dim bApu1 As Boolean
  Dim bApu2 As Boolean
  Dim apu1 As String
  Dim apu2 As String
  Dim sCtoCheck As String
  Dim intIndex As Integer
  
  intIndex = InStr(1, sNbr, "DI")
  If intIndex > 0 Then
    sNbr = Left(sNbr, intIndex - 1)
  End If
  
  For intIndex = 1 To Len(sNbr)
    sCtoCheck = Mid$(sNbr, intIndex, 1)
    If bApu2 = False Then
        If IsNumeric(sCtoCheck) Or sCtoCheck = "." Or sCtoCheck = "," Then
            apu1 = apu1 & sCtoCheck
        Else
            If apu1 <> "" Then bApu1 = True
        End If
    End If
      
    If bApu1 Then
        If sCtoCheck = "N" Then
            bApu2 = True
        Else
            If IsNumeric(sCtoCheck) Or sCtoCheck = "." Or sCtoCheck = "," Then
                apu2 = apu2 & sCtoCheck
            End If
        End If
    End If
  Next intIndex
  
  If i = 1 Then
    ParseLocal2 = apu1
  Else
    ParseLocal2 = apu2
  End If

End Function

Private Function CheckForBushing2(sAnumber As String, sAnumber2 As String, sAnumber3 As String, sAnumber4 As String, dPhaseCurrent As Double)
  Dim i As Integer
  Dim sBushing As String
  Dim sBushing2 As String
  Dim sMark As String
  Dim sSQL As String
  Dim AccessoriesSet As DAO.Recordset
  Dim AccessoriesSetADO As ADODB.Recordset
  Dim bOut As Boolean
  Dim bOut2 As Boolean
  
  Dim sLocal2()
  
  bOut = False
  bOut2 = False
  sBushing = ""
  sBushing2 = ""
  sMark = "*"
  
  ConnectToAccessoryDB "frmAccessories.CheckForBushing2"
  ConnectToLDTNetDB "frmAccessories.CheckForBushing2"
  
  'quit if no default bushings exist
  If sAnumber = "" Then
      CheckForBushing2 = sBushing
      Exit Function
  End If
  
  If useSQLServer = True Or useAccessADO = True Then
  
    ' first search for certain class of items, we don't want to search all items in db
    If iAccessorySourceDB = 1 Then
        sSQL = "SELECT Articlenumber from Accessories WHERE ArticleNumber like '" & sAnumber & "'"
        Set AccessoriesSetADO = New ADODB.Recordset
        AccessoriesSetADO.Open sSQL, AccessoriesdbADO, adOpenKeyset
    Else
        sAnumber = sMark & sAnumber & sMark
        sSQL = "select code, ArticlenumberLocal2 from Item where TDTClass='1'"
        If sAnumber2 <> "" Then
            sAnumber2 = sMark & sAnumber2 & sMark
        End If
        If sAnumber3 <> "" Then
            sAnumber3 = sMark & sAnumber3 & sMark
        End If
        If sAnumber4 <> "" Then
            sAnumber4 = sMark & sAnumber4 & sMark
        End If
        
        Set AccessoriesSetADO = New ADODB.Recordset
        AccessoriesSetADO.Open sSQL, dbLDTNetADO, adOpenKeyset
    End If
    
    Dim bFound As Boolean
    
    'populate set
    AccessoriesSetADO.MoveLast
    AccessoriesSetADO.MoveFirst
    i = 0
    ReDim sLocal2(2, AccessoriesSetADO.RecordCount)
    Do Until AccessoriesSetADO.EOF
        
        ' check if this item matches any of the article numbers
        bFound = AccessoriesSetADO("ArticleNumberLocal2") Like sAnumber
        If sAnumber2 <> sMark & sMark Then
          bFound = bFound Or AccessoriesSetADO("ArticleNumberLocal2") Like sAnumber2
        End If
        If sAnumber3 <> sMark & sMark Then
          bFound = bFound Or AccessoriesSetADO("ArticleNumberLocal2") Like sAnumber3
        End If
        If sAnumber4 <> sMark & sMark Then
          bFound = bFound Or AccessoriesSetADO("ArticleNumberLocal2") Like sAnumber4
        End If
        
        If bFound Then
          sLocal2(1, i) = AccessoriesSetADO(1)
          If Len(sAnumber) = 5 Then
              sLocal2(0, i) = cVal_ex(ParseLocal2(Remove_Spaces(sLocal2(1, i)), 1))
          Else
              sLocal2(0, i) = cVal_ex(ParseLocal2(Remove_Spaces(sLocal2(1, i)), 2))
          End If
          i = i + 1
        End If
        
        AccessoriesSetADO.MoveNext
    Loop
    
    'close set
    AccessoriesSetADO.Close
    Set AccessoriesSetADO = Nothing
  
  Else ' connection choise
  
    If iAccessorySourceDB = 1 Then
        sSQL = "SELECT Articlenumber from Accessories WHERE ArticleNumber like '" & sAnumber & "'"
        Set AccessoriesSet = Accessoriesdb.OpenRecordset(sSQL, dbOpenSnapshot)
    Else
        sAnumber = sMark & sAnumber & sMark
        sSQL = "select code, ArticlenumberLocal2 from Item where TDTClass='1'"
        If sAnumber2 <> "" Then
            sAnumber2 = sMark & sAnumber2 & sMark
        End If
        If sAnumber3 <> "" Then
            sAnumber3 = sMark & sAnumber3 & sMark
        End If
        If sAnumber4 <> "" Then
            sAnumber4 = sMark & sAnumber4 & sMark
        End If
        If WDBconn <> "" Then
            Set AccessoriesSet = dbLDTNet.OpenRecordset(sSQL, dbOpenSnapshot, dbSQLPassThrough)
        Else
            Set AccessoriesSet = dbLDTNet.OpenRecordset(sSQL, dbOpenSnapshot)
        End If
    End If
    
    'populate set
    AccessoriesSet.MoveLast
    AccessoriesSet.MoveFirst
    i = 0
    ReDim sLocal2(2, AccessoriesSet.RecordCount)
    Do Until AccessoriesSet.EOF
    
        ' check if this item matches any of the article numbers
        bFound = AccessoriesSet("ArticleNumberLocal2") Like sAnumber
        If sAnumber2 <> sMark & sMark Then
          bFound = bFound Or AccessoriesSet("ArticleNumberLocal2") Like sAnumber2
        End If
        If sAnumber3 <> sMark & sMark Then
          bFound = bFound Or AccessoriesSet("ArticleNumberLocal2") Like sAnumber3
        End If
        If sAnumber4 <> sMark & sMark Then
          bFound = bFound Or AccessoriesSet("ArticleNumberLocal2") Like sAnumber4
        End If
        
        If bFound Then
          sLocal2(1, i) = AccessoriesSet(1)
          If Len(sAnumber) = 5 Then
              sLocal2(0, i) = cVal_ex(ParseLocal2(Remove_Spaces(sLocal2(1, i)), 1))
          Else
              sLocal2(0, i) = cVal_ex(ParseLocal2(Remove_Spaces(sLocal2(1, i)), 2))
          End If
          i = i + 1
        End If
        
        AccessoriesSet.MoveNext
    Loop
    
    'close set
    AccessoriesSet.Close
    Set AccessoriesSet = Nothing
  
  End If ' connection choise
  
  SortArray sLocal2, 0
  
  For i = 0 To UBound(sLocal2, 2)
    'check if there is a single bushing with a current value big enough
    If sLocal2(0, i) >= dPhaseCurrent Then
        sBushing = sLocal2(1, i)
        bOut = True
    End If
      
    'check if there is a double bushing with a current value big enough
    If sLocal2(0, i) >= (dPhaseCurrent / 2) And bOut2 = False Then
        sBushing2 = sLocal2(1, i)
        bOut2 = True
    End If
    If bOut = True Then Exit For
  Next i
  
  'if there isn't a single bushing big enough then use double bushing
  If sBushing = "" Then sBushing = "__2x" & sBushing2
  CheckForBushing2 = sBushing

End Function

Public Sub FillAccessoriesGrid2(iSubset As Integer)
'Täyttää grdAccessories-gridin valittuun varustesettiin kuuluvilla varusteilla.
'Nämä löytyvät joko Accessor_30-kannasta tai LDTNet_30-kannasta.
'iSubset <0  näytetään kaikki valittuun varustesettiin kuuluvat varusteet
'        >0  näytetään valitusta varustesetistä vain alaluokka iSubset
  Dim RowOffset%, RowsMax, ColOffset%, i
  Dim iX As Integer
  Dim AccessoriesSet As DAO.Recordset
  Dim AccessoriesSetADO As ADODB.Recordset
  Dim CSetIs2 As Boolean
  Dim AccessorClass As String   'varusteluokan numero stringinä!
  Dim CName As String
  Dim CSet As String
  Dim sqlTmp As String
  
  MousePointer = vbArrowHourglass
  
  'Varustesetin nimi Cname. Jos kyseessä on käämikytkimet niin nimessä on pilkku ja CSetIs2 kertoo kumpi kahdesta setistä on kyseessä.
  CName = cmbAccessories.text
  iX = InStr(CName, ",")
  If iX > 0 Then
    CSet = Right(CName, (Len(CName) - iX + 1))
    CSetIs2 = False
    If CSet = CSet2 Then CSetIs2 = True
    CName = Left(CName, (iX - 1))
  End If
  
  If useSQLServer = True Or useAccessADO = True Then 'SQL-kanta

    'luetaan valitun varustesetin TDTClass Accessor_30-kannan Names-taulusta muuttujaan AccessorClass
    SQLQuery$ = "SELECT * FROM Names WHERE Name = '" & CName & "'"
    Set AccessoriesSetADO = New ADODB.Recordset
    AccessoriesSetADO.Open SQLQuery$, AccessoriesdbADO
    If AccessoriesSetADO.EOF Then
      addMessage "Accessory class was not found in database Accessor_30", MESSAGETYPE_WARNING
      Exit Sub
    End If
    AccessoriesSetADO.MoveFirst
    AccessorClass = AccessoriesSetADO("Class")
    AccessoriesSetADO.Close
    'grdAccessories-gridin alustus
    RowsMax = 10
    grdAccessories.Rows = RowsMax + 1
    grdAccessories.Cols = 4
    For i = 0 To 3
        For RowOffset% = 0 To RowsMax
            ColOffset% = i
            grdAccessories.row = RowOffset%
            grdAccessories.Col = ColOffset%
            grdAccessories.text = ""
        Next RowOffset%
    Next i
    grdAccessories.ColWidth(0) = 2800
    grdAccessories.ColWidth(1) = 2800
    grdAccessories.ColWidth(2) = 2600
    grdAccessories.ColWidth(3) = 1
    grdAccessories.row = 0
    grdAccessories.Col = 0

    Select Case CName
        'Varustesetti on Accessor_30-kannassa. Jos varusteen Description-kentässä on 666 niin varustetta ei näytetä valikoimassa!
        Case "Terminal Box", "Current Transformer", "Vattenfall"
            SQLQuery$ = "SELECT * FROM Accessories WHERE Class = '" & AccessorClass & "' AND ((Description is null) OR (Description NOT LIKE '666'))"
            
            If CName = "Terminal Box" Then SQLQuery$ = SQLQueryForTerminalBox(SQLQuery$)

            cmbViewMode.listIndex = 2
        
            Set AccessoriesSetADO = New ADODB.Recordset
            AccessoriesSetADO.Open SQLQuery$, AccessoriesdbADO
      
            If AccessoriesSetADO.EOF Then
                grdAccessories.Enabled = False
                AccessoriesSetADO.Close
                MousePointer = vbDefault
                Exit Sub
            Else
                grdAccessories.Enabled = True
            End If
    
            AccessoriesSetADO.MoveFirst
            RowOffset% = 1
        
            Do Until AccessoriesSetADO.EOF
                RowsMax = RowOffset%
                If RowOffset% > grdAccessories.Rows Then grdAccessories.Rows = RowOffset% + 10
                grdAccessories.row = RowOffset% - 1
                grdAccessories.Col = 0
                grdAccessories.text = ""
                If VarType(AccessoriesSetADO("ArticleNumber")) > 1 Then grdAccessories.text = AccessoriesSetADO("ArticleNumber")
                grdAccessories.Col = 1
                grdAccessories.text = ""
                If VarType(AccessoriesSetADO("Name")) > 1 Then grdAccessories.text = AccessoriesSetADO("Name")
                grdAccessories.Col = 2
                grdAccessories.text = ""
                grdAccessories.Col = 3
                grdAccessories.text = ""
                RowOffset% = RowOffset% + 1
                AccessoriesSetADO.MoveNext
            Loop
            grdAccessories.row = 1
            AccessoriesSetADO.Close
      
        Case Else
        
            ' KS 5.11.2009 queries are modified to give results faster
            ' previous way was to get Items first and then find name code for each resulting row with getNameCode()-function
            ' new queries find name codes at the same time
            ' there is additional complexity in queries, because we need to handle situations where there is no translation for some items available.
            ' query finds makes union of 'those with translation available' and 'those with no translation available'
        
            'Varustesetti on LDTNet-kannassa
            If AccessorClass <> "8" Then 'muut kuin käämikytkimet
                Select Case cmbViewMode.listIndex
                    Case 0
                        sqlTmp = "ArticleNumber"
                    Case 1
                        sqlTmp = "ArticleNumberLocal1"
                    Case Else
                        sqlTmp = "ArticleNumberLocal2"
                End Select
                If iSubset = -1 Then 'näytetään koko setti
                    SQLQuery$ = "SELECT i." & sqlTmp & ", i.NameCode, i.Description, i.Code, n.Name FROM Item i, Names n " & _
                    "WHERE i.TDTClass = '" & AccessorClass & "' AND i.NameCode = n.NameCode AND n.language = '" & sCostSummaryLang & _
                    "' Union SELECT " & sqlTmp & ", NameCode, Description, Code, NameCode FROM Item WHERE TDTClass = '" & AccessorClass & _
                    "' AND NameCode NOT IN (SELECT i.NameCode FROM Item i, Names n WHERE i.NameCode = n.NameCode AND n.language = '" & sCostSummaryLang & "') " & _
                    " ORDER BY i." & sqlTmp
                Else                 'näytetään setistä vain valittu alaluokka
                    SQLQuery$ = "SELECT i." & sqlTmp & ", i.NameCode, i.Description, i.Code, n.Name FROM Item i, Names n " & _
                    "WHERE i.TDTClass = '" & AccessorClass & "' AND i.NParam1 = " & iSubset & " AND i.NameCode = n.NameCode AND n.language = '" & sCostSummaryLang & _
                    "' Union SELECT " & sqlTmp & ", NameCode, Description, Code, NameCode FROM Item WHERE TDTClass = '" & AccessorClass & _
                    "' AND NParam1 = " & iSubset & " AND NameCode NOT IN (SELECT i.NameCode FROM Item i, Names n WHERE i.NameCode = n.NameCode AND n.language = '" & sCostSummaryLang & "') " & _
                    " ORDER BY i." & sqlTmp
                End If
            Else 'käämikytkimet
                Select Case cmbViewMode.listIndex
                    Case 0
                        sqlTmp = "ArticleNumber"
                    Case 1
                        sqlTmp = "ArticleNumberLocal1"
                    Case Else
                        sqlTmp = "ArticleNumberLocal2"
                End Select
                If CSetIs2 Then
                    SQLQuery$ = "SELECT i." & sqlTmp & ", i.NameCode, i.Description, i.Code, n.Name FROM Item i, Names n " & _
                    "WHERE i.TDTClass = '" & AccessorClass & "' AND (Left(" & sqlTmp & ",5) = '" & OLTCset21 & "' OR Left(" & sqlTmp & ",5) = '" & OLTCset22 & "') AND i.NameCode = n.NameCode and n.language = '" & sCostSummaryLang & _
                    "' Union SELECT " & sqlTmp & ", NameCode, Description, Code, NameCode FROM Item WHERE TDTClass = '" & AccessorClass & _
                    "' AND NameCode NOT IN (SELECT i.NameCode FROM Item i, Names n WHERE i.NameCode = n.NameCode AND n.language = '" & sCostSummaryLang & "') " & _
                    " ORDER BY i." & sqlTmp
                Else
                    SQLQuery$ = "SELECT i." & sqlTmp & ", i.NameCode, i.Description, i.Code, n.Name FROM Item i, Names n " & _
                    "WHERE i.TDTClass = '" & AccessorClass & "' AND NOT (Left(" & sqlTmp & ",5) = '" & OLTCset21 & "' OR Left(" & sqlTmp & ",5) = '" & OLTCset22 & "') AND NOT (Left(" & sqlTmp & ",2) = '" & OLTCvanhat & "') AND i.NameCode = n.NameCode and n.language = '" & sCostSummaryLang & _
                    "' Union SELECT " & sqlTmp & ", NameCode, Description, Code, NameCode FROM Item WHERE TDTClass = '" & AccessorClass & _
                    "' AND NameCode NOT IN (SELECT i.NameCode FROM Item i, Names n WHERE i.NameCode = n.NameCode AND n.language = '" & sCostSummaryLang & "') " & _
                    " ORDER BY i." & sqlTmp
                End If
            End If
        
            Set AccessoriesSetADO = New ADODB.Recordset
            AccessoriesSetADO.Open SQLQuery$, dbLDTNetADO, adOpenKeyset
      
            If AccessoriesSetADO.EOF Then
                grdAccessories.Enabled = False
                AccessoriesSetADO.Close
                MousePointer = vbDefault
                Exit Sub
            Else
                grdAccessories.Enabled = True
                AccessoriesSetADO.MoveLast
                AccessoriesSetADO.MoveFirst
            End If
    
            AccessoriesSetADO.MoveFirst
            RowOffset% = 1
        
            'Täytetään grid. Läpivientien yhteydessä filtteröidään niiden liittimet pois koska ne laitetaan
            'omiin cmbAPL7a2-comboihinsa mokkulassa FillConnectorCombos2.
            Do Until AccessoriesSetADO.EOF
                RowsMax = RowOffset%
                If RowOffset% > grdAccessories.Rows Then grdAccessories.Rows = RowOffset% + 10
                iX = 1
                If Left(AccessoriesSetADO(0), 7) = "KANL-AF" Then iX = 0
                If Left(AccessoriesSetADO(0), 7) = "KANL-DP" Or Left(AccessoriesSetADO(0), 7) = "KANL-DR" Then iX = 0
                If Left(AccessoriesSetADO(0), 7) = "KANL-EP" Or Left(AccessoriesSetADO(0), 7) = "KANL-ER" Then iX = 0
                If Left(AccessoriesSetADO(0), 7) = "KANL-FP" Or Left(AccessoriesSetADO(0), 7) = "KANL-FR" Then iX = 0
                If iX = 1 Then
                    grdAccessories.row = RowOffset% - 1
                    grdAccessories.Col = 0
                    grdAccessories.text = ""
                    If VarType(AccessoriesSetADO(0)) > 1 Then grdAccessories.text = AccessoriesSetADO(0)
                    grdAccessories.Col = 1
                    grdAccessories.text = ""
                    If VarType(AccessoriesSetADO(1)) > 1 Then grdAccessories.text = AccessoriesSetADO("Name")
                    grdAccessories.Col = 2
                    grdAccessories.text = ""
                    If VarType(AccessoriesSetADO(2)) > 1 Then grdAccessories.text = AccessoriesSetADO(2)
                    grdAccessories.Col = 3
                    grdAccessories.text = ""
                    If VarType(AccessoriesSetADO(3)) > 1 Then grdAccessories.text = AccessoriesSetADO(3)
                    RowOffset% = RowOffset% + 1
                End If
                AccessoriesSetADO.MoveNext
            Loop
            grdAccessories.row = 1
            AccessoriesSetADO.Close
            
    End Select
     
  Else ' connection choise  access-kanta
    
    'luetaan valitun varustesetin TDTClass Accessor_30-kannan Names-taulusta muuttujaan AccessorClass
    SQLQuery$ = "SELECT * FROM Names WHERE Name = '" & CName & "'"
    Set AccessoriesSet = Accessoriesdb.OpenRecordset(SQLQuery$, dbOpenDynaset)
    
    If AccessoriesSet.EOF Then
        addMessage "Accessory class was not found in database Accessor_30", MESSAGETYPE_WARNING
        Exit Sub
    End If
    
    AccessoriesSet.MoveFirst
    AccessorClass = AccessoriesSet("Class")
    AccessoriesSet.Close
    'grdAccessories-gridin alustus
    RowsMax = 10
    grdAccessories.Rows = RowsMax + 1
    grdAccessories.Cols = 4
    
    For i = 0 To 3
        For RowOffset% = 0 To RowsMax
            ColOffset% = i
            grdAccessories.row = RowOffset%
            grdAccessories.Col = ColOffset%
            grdAccessories.text = ""
        Next RowOffset%
    Next i
    grdAccessories.ColWidth(0) = 2800
    grdAccessories.ColWidth(1) = 2800
    grdAccessories.ColWidth(2) = 2600
    grdAccessories.ColWidth(3) = 1
    grdAccessories.row = 0
    grdAccessories.Col = 0
    
    Select Case CName
        'Varustesetti on Accessor_30-kannassa. Jos varusteen Description-kentässä on 666 niin varustetta ei näytetä valikoimassa!
        Case "Terminal Box", "Current Transformer", "Vattenfall"
            cmbViewMode.listIndex = 2
            SQLQuery$ = "SELECT * FROM Accessories WHERE Class = '" & AccessorClass & "' AND ((Description is null) OR (Description NOT LIKE '666'))"
        
            If CName = "Terminal Box" Then SQLQuery$ = SQLQueryForTerminalBox(SQLQuery$)
        
            Set AccessoriesSet = Accessoriesdb.OpenRecordset(SQLQuery$, dbOpenSnapshot)
      
            If AccessoriesSet.EOF Then
                grdAccessories.Enabled = False
                AccessoriesSet.Close
                MousePointer = vbDefault
                Exit Sub
            Else
                grdAccessories.Enabled = True
            End If
    
            AccessoriesSet.MoveFirst
            RowOffset% = 1
    
            Do Until AccessoriesSet.EOF
                RowsMax = RowOffset%
                If RowOffset% > grdAccessories.Rows Then grdAccessories.Rows = RowOffset% + 10
                grdAccessories.row = RowOffset% - 1
                grdAccessories.Col = 0
                grdAccessories.text = ""
                If VarType(AccessoriesSet("ArticleNumber")) > 1 Then grdAccessories.text = AccessoriesSet("ArticleNumber")
                grdAccessories.Col = 1
                grdAccessories.text = ""
                If VarType(AccessoriesSet("Name")) > 1 Then grdAccessories.text = AccessoriesSet("Name")
                grdAccessories.Col = 2
                grdAccessories.text = ""
                grdAccessories.Col = 3
                grdAccessories.text = ""
                RowOffset% = RowOffset% + 1
                AccessoriesSet.MoveNext
            Loop
            grdAccessories.row = 1
            AccessoriesSet.Close
      
        Case Else
            'Varustesetti on LDTNet-kannassa
            If AccessorClass <> "8" Then 'muut kuin käämikytkimet
                If iSubset = -1 Then 'näytetään koko setti
                    Select Case cmbViewMode.listIndex
                    Case 0
                        SQLQuery$ = "SELECT ArticleNumber, NameCode, Description, Code FROM Item WHERE TDTClass = '" & AccessorClass & "' ORDER BY articlenumber"
                    Case 1
                        SQLQuery$ = "SELECT ArticleNumberLocal1, NameCode, Description, Code FROM Item WHERE TDTClass = '" & AccessorClass & "' ORDER BY articlenumberlocal1"
                    Case 2
                        SQLQuery$ = "SELECT ArticleNumberLocal2, NameCode, Description, Code FROM Item WHERE TDTClass = '" & AccessorClass & "' ORDER BY articlenumberlocal2"
                    End Select
                Else                 'näytetään setistä vain valittu alaluokka
                    Select Case cmbViewMode.listIndex
                    Case 0
                        SQLQuery$ = "SELECT ArticleNumber, NameCode, Description, Code FROM Item WHERE TDTClass = '" & AccessorClass & "' AND NParam1 = " & iSubset & " ORDER BY articlenumber"
                    Case 1
                        SQLQuery$ = "SELECT ArticleNumberLocal1, NameCode, Description, Code FROM Item WHERE TDTClass = '" & AccessorClass & "' AND NParam1 = " & iSubset & " ORDER BY articlenumberlocal1"
                    Case 2
                        SQLQuery$ = "SELECT ArticleNumberLocal2, NameCode, Description, Code FROM Item WHERE TDTClass = '" & AccessorClass & "' AND NParam1 = " & iSubset & " ORDER BY articlenumberlocal2"
                    End Select
                End If
            Else 'käämikytkimet
                Select Case cmbViewMode.listIndex
                    Case 0
                        If CSetIs2 Then
                            SQLQuery$ = "SELECT ArticleNumber, NameCode, Description, Code FROM Item WHERE TDTClass = '" & AccessorClass & "' AND (Left(ArticleNumber,5) = '" & OLTCset21 & "' OR Left(ArticleNumber,5) = '" & OLTCset22 & "') ORDER BY articlenumber"
                        Else
                            SQLQuery$ = "SELECT ArticleNumber, NameCode, Description, Code FROM Item WHERE TDTClass = '" & AccessorClass & "' AND NOT (Left(ArticleNumber,5) = '" & OLTCset21 & "' OR Left(ArticleNumber,5) = '" & OLTCset22 & "') AND NOT (Left(ArticleNumber,2) = '" & OLTCvanhat & "') ORDER BY articlenumber"
                        End If
                    Case 1
                        If CSetIs2 Then
                            SQLQuery$ = "SELECT ArticleNumberLocal1, NameCode, Description, Code FROM Item WHERE TDTClass = '" & AccessorClass & "' AND (Left(ArticleNumberLocal1,5) = '" & OLTCset21 & "' OR Left(ArticleNumberLocal1,5) = '" & OLTCset22 & "') ORDER BY articlenumberlocal1"
                        Else
                            SQLQuery$ = "SELECT ArticleNumberLocal1, NameCode, Description, Code FROM Item WHERE TDTClass = '" & AccessorClass & "' AND NOT (Left(ArticleNumberLocal1,5) = '" & OLTCset21 & "' OR Left(ArticleNumberLocal1,5) = '" & OLTCset22 & "') AND NOT (Left(ArticleNumberLocal1,2) = '" & OLTCvanhat & "') ORDER BY articlenumberlocal1"
                        End If
                    Case 2
                        If CSetIs2 Then
                            SQLQuery$ = "SELECT ArticleNumberLocal2, NameCode, Description, Code FROM Item WHERE TDTClass = '" & AccessorClass & "' AND (Left(ArticleNumberLocal2,5) = '" & OLTCset21 & "' OR Left(ArticleNumberLocal2,5) = '" & OLTCset22 & "') ORDER BY articlenumberlocal2"
                        Else
                            SQLQuery$ = "SELECT ArticleNumberLocal2, NameCode, Description, Code FROM Item WHERE TDTClass = '" & AccessorClass & "' AND NOT (Left(ArticleNumberLocal2,5) = '" & OLTCset21 & "' OR Left(ArticleNumberLocal2,5) = '" & OLTCset22 & "') AND NOT (Left(ArticleNumberLocal2,2) = '" & OLTCvanhat & "') ORDER BY articlenumberlocal2"
                        End If
                End Select
            End If
      
            If WDBconn <> "" Then
                Set AccessoriesSet = dbLDTNet.OpenRecordset(SQLQuery$, dbOpenDynaset, dbSQLPassThrough)
            Else
                Set AccessoriesSet = dbLDTNet.OpenRecordset(SQLQuery$, dbOpenSnapshot)
            End If
      
            If AccessoriesSet.EOF Then
                grdAccessories.Enabled = False
                AccessoriesSet.Close
                MousePointer = vbDefault
                Exit Sub
            Else
                grdAccessories.Enabled = True
                AccessoriesSet.MoveLast
                AccessoriesSet.MoveFirst
            End If
    
            AccessoriesSet.MoveFirst
            RowOffset% = 1
            
            'Täytetään grid. Läpivientien yhteydessä filtteröidään niiden liittimet pois koska ne laitetaan
          'omiin cmbAPL7a2-comboihinsa mokkulassa FillConnectorCombos2.
            Do Until AccessoriesSet.EOF
                RowsMax = RowOffset%
                If RowOffset% > grdAccessories.Rows Then grdAccessories.Rows = RowOffset% + 10
                iX = 1
                If Left(AccessoriesSet(0), 7) = "KANL-AF" Then iX = 0
                If Left(AccessoriesSet(0), 7) = "KANL-DP" Or Left(AccessoriesSet(0), 7) = "KANL-DR" Then iX = 0
                If Left(AccessoriesSet(0), 7) = "KANL-EP" Or Left(AccessoriesSet(0), 7) = "KANL-ER" Then iX = 0
                If Left(AccessoriesSet(0), 7) = "KANL-FP" Or Left(AccessoriesSet(0), 7) = "KANL-FR" Then iX = 0
                If iX = 1 Then
                    grdAccessories.row = RowOffset% - 1
                    grdAccessories.Col = 0
                    grdAccessories.text = ""
                    If VarType(AccessoriesSet(0)) > 1 Then grdAccessories.text = AccessoriesSet(0)
                    grdAccessories.Col = 1
                    grdAccessories.text = ""
                    If VarType(AccessoriesSet(1)) > 1 Then grdAccessories.text = getNameCode(AccessoriesSet(1))
                    grdAccessories.Col = 2
                    grdAccessories.text = ""
                    If VarType(AccessoriesSet(2)) > 1 Then grdAccessories.text = AccessoriesSet(2)
                    grdAccessories.Col = 3
                    grdAccessories.text = ""
                    If VarType(AccessoriesSet(3)) > 1 Then grdAccessories.text = AccessoriesSet(3)
                    RowOffset% = RowOffset% + 1
                End If
                AccessoriesSet.MoveNext
            Loop
            grdAccessories.row = 1
            AccessoriesSet.Close
    End Select

  End If ' connection choise

  MousePointer = vbDefault

End Sub

Private Function SQLQueryForTerminalBox(SQLQuery$) As String

  If TankType = "N" Then
    SQLQuery$ = SQLQuery$ & " AND ArticleNumber not in ('" & CTB_COMMON_CANOEBOX & "', '" & CTB_SEPERATE_CANOEBOX_HV & "', '" & CTB_SEPERATE_CANOEBOX_LV & "', '" & _
                                                          CTB_COMMONBOX & "', '" & CTB_SEPERATEBOX_HV & "', '" & CTB_SEPERATEBOX_LV & "', '" & _
                                                          CTB_SUNROOF & "' ,'SR 50')"
  ElseIf TankType = "R" Then
    If UBound(CableTerminationBoxes) = 0 Then
        SQLQuery$ = SQLQuery$ & " AND ArticleNumber not in ('" & CTB_COMMON_CANOEBOX & "', '" & CTB_SEPERATE_CANOEBOX_HV & "', '" & _
        CTB_SEPERATE_CANOEBOX_LV & "', '" & CTB_SUNROOF & "' )"
    Else
        SQLQuery$ = SQLQuery$ & " AND ArticleNumber not in ('" & CTB_COMMON_CANOEBOX & "', '" & CTB_SEPERATE_CANOEBOX_HV & "', '" & _
        CTB_SEPERATE_CANOEBOX_LV & "' )"
    End If
  ElseIf TankType = "C" And UBound(CableTerminationBoxes) = 0 Then
    SQLQuery$ = SQLQuery$ & " AND ArticleNumber not in ('" & CTB_SUNROOF & "' )"
  End If

  SQLQueryForTerminalBox = SQLQuery$
  
End Function

Private Sub grdAccessories_DblClick()
'Jos max varustemäärää Other-gridissä kasvatetaan niin pitää tarkistaa riittäkö muuttujien OtherGridLineBuffer, sItemCode ja memAPL7a dimensiot.
'Kahden jälkimmäisen suurimmat indeksiviittaukset löytyvät mokkulasta UpdateOtherGridItemCodes.
  Dim CName As String
  Dim DefLabel As String
  Dim iX As Integer

  If NoAction Then Exit Sub
  NoAction = True

  ClearMessages

  AccessoryChangesMade = True

  If OtherGridFocus = True Then
    'accessory selected to other accessories grid
    If OtherGridLineCount >= 50 Then  'vrt. RowsMax mokkulassa InitOtherGrid
        addMessage "Maximum number of other accessories exceeded!", MESSAGETYPE_ERROR
        NoAction = False
        TooMany = True
        Exit Sub
    End If
    
    TooMany = False

    If iAccessorySourceDB <> 1 Then
        grdAccessories.Col = 3
        sItemCode(24 + (OtherGridLineCount * 5)) = grdAccessories.text
    End If
    CreateOtherGridLine grdAccessories.row
    CheckAccessoryDependencies grdAccessories.row
    NoAction = False
    If bAddSunRoof = True Then
        bAddSunRoof = False
        cmbAccessories_Click
    End If
    clbCost
    Exit Sub
  End If

  'accessory selected to tAPL7A textbox
  If BushingFocus = True Then
    NoAction = False
    grdAccessories.Col = 0
    DefLabel = grdAccessories.text
    tAPL7A(FocusIndex) = DefLabel
  End If
  
  CName = cmbAccessories.List(cmbAccessories.listIndex)
  iX = InStr(CName, ",")
  If iX > 0 Then CName = Left(CName, (iX - 1))

  For iX = 1 To 22
    Select Case iX
      Case 8, 10, 12, 14, 16, 18, 20, 22
        If CName = lbl7A(iX).caption Then
          FocusIndex = iX
          Exit For
        End If
    End Select
  Next iX

  If FocusIndex = 1000 Or FocusIndex = 100 Then
    NoAction = False
    clbCost
    Exit Sub
  End If

  tAPL7A(FocusIndex).SetFocus

  If iAccessorySourceDB <> 1 Then
    grdAccessories.Col = 3
    sItemCode(FocusIndex) = grdAccessories.text
  End If

  grdAccessories.Col = 0

  DefLabel = grdAccessories.text
  If FocusIndex = 16 Then
    If tAPL7A(FocusIndex).text <> "" Then
      RemoveItemFromCableTerminationBoxesByArticleNumber tAPL7A(FocusIndex).text
    End If
    CheckAccessoryDependencies (grdAccessories.row)
  End If
  tAPL7A(FocusIndex) = DefLabel

  NoAction = False

  If bAddSunRoof = True Then
    bAddSunRoof = False
    cmbAccessories_Click
  End If

  clbCost

End Sub
'if items have dependencies handle them here
Private Sub CheckAccessoryDependencies(rowEntry As Integer)
  'CableTerminationBox sunroof needs to keep track of all boxes
  Dim i As Integer
   
  grdAccessories.Col = 0
  grdAccessories.row = rowEntry
  Select Case grdAccessories.text
    Case CTB_COMMONBOX, CTB_COMMON_CANOEBOX, CTB_SEPERATE_CANOEBOX_HV, CTB_SEPERATE_CANOEBOX_LV, _
        CTB_SEPERATEBOX_HV, CTB_SEPERATEBOX_LV
        i = UBound(CableTerminationBoxes)
        ReDim Preserve CableTerminationBoxes(i + 1)
          
        CableTerminationBoxes(i + 1) = grdAccessories.text
        If i = 0 Then
            bAddSunRoof = True
        End If
          
  End Select

End Sub
Private Sub grdOther_SelChange()

  AccessoryChangesMade = True
  
End Sub

Private Sub mnuAccessorySetOpen_Click()

  If NoAction Then Exit Sub
  NoAction = True

  Update_memAPL7a

  frmAccessorySet.Show 1
  Update_tAPL7a
  NoAction = False
  
  If bTriggerGenerateBushings = True Then
    If iAccessorySourceDB = 1 Then
        ConnectToAccessoryDB "frmAccessories.mnuAccessorySetOpen_Click"
    Else
        ConnectToLDTNetDB "frmAccessories.mnuAccessorySetOpen_Click"
    End If
    GenerateBushings    'can't be in frmAccessorySet.cmbOpen_Click because uses tAPL7A textboxes
    If iAccessorySourceDB = 1 Then
        DisconnectAccessoryDB "frmAccessories.mnuAccessorySetOpen_Click"
    Else
        DisconnectLDTNetDB "frmAccessories.mnuAccessorySetOpen_Click"
    End If
    bTriggerGenerateBushings = False
  End If
  Screen.MousePointer = vbDefault
  
End Sub

Private Sub mnuAccessorySetSave_Click()
  Dim i As Integer
  Dim StdSet As DAO.Recordset
  Dim StdSetADO As ADODB.Recordset
  
  If NoAction Then Exit Sub
  NoAction = True
  ClearMessages
  
  For i = 2 To 22 Step 2
  
    If tAPL7A(i).text > "" Then
      If tAPL7A(i - 1).text = "" Then
        addMessage "Please input number of " & lbl7A(i).caption & " !", MESSAGETYPE_WARNING
        tAPL7A(i - 1).SetFocus
        NoAction = False
        Exit Sub
      End If
    End If
    
     If tAPL7A(i - 1).text > "" Then
      If tAPL7A(i).text = "" Then
        addMessage "Please input Article Number of " & lbl7A(i).caption & " !", MESSAGETYPE_WARNING
        tAPL7A(i).SetFocus
        NoAction = False
        Exit Sub
      End If
    End If
  
  Next i

  Update_memAPL7a

  If Len(AccessorySetCode) = 0 Or Len(AccessorySetDescription) = 0 Then
    frmAccessorySetCode.Show 1
    NoAction = False
    Exit Sub
  End If
  
  ConnectToStandardDB "frmAccessories.mnuAccessorySetSave_Click"
  
  'disable resaving of standard accessory set
  If Left(AccessorySetCode, 7) = "STDSET-" Then
    sSQL = "SELECT AccessorySetCode FROM AccessorySets WHERE AccessorySetCode = '" + AccessorySetCode + "'"
    
    If useSQLServer = True Or useAccessADO = True Then
  
      Set StdSetADO = New ADODB.Recordset
      StdSetADO.Open sSQL, dbStandardADO
      If StdSetADO.EOF Then
          StdSetADO.Close
          SaveAccessorySet
          NoAction = False
          Exit Sub
      End If
      If Not StdSetADO.EOF Then
          MsgBox "There is already saved standard accessory set " & vbNewLine & "named '" & AccessorySetCode & "' " & _
                  "and you cannot replace it." & vbNewLine & "Select 'Save As' and use another name, please.", vbCritical
      End If
      StdSetADO.Close
    
    Else ' connection choise
    
      Set StdSet = dbStandard.OpenRecordset(sSQL, dbOpenDynaset)
      If StdSet.EOF Then
          StdSet.Close
          SaveAccessorySet
          NoAction = False
          Exit Sub
      End If
      If Not StdSet.EOF Then
          MsgBox "There is already saved standard accessory set " & vbNewLine & "named '" & AccessorySetCode & "' " & _
                  "and you cannot replace it." & vbNewLine & "Select 'Save As' and use another name, please.", vbCritical
      End If
      StdSet.Close
    
    End If ' connection choise
  Else
    SaveAccessorySet
  End If
  
  DisconnectStandardDB "frmAccessories.mnuAccessorySetSave_Click"
  NoAction = False
  
End Sub

Private Sub mnuAccessorySetSaveAs_Click()
  Dim i As Integer
  
  If NoAction Then Exit Sub
  NoAction = True
  ClearMessages
  
  For i = 2 To 22 Step 2
  
    If tAPL7A(i).text > "" Then
      If tAPL7A(i - 1).text = "" Then
        addMessage "Please input number of " & lbl7A(i).caption & " !", MESSAGETYPE_WARNING
        tAPL7A(i - 1).SetFocus
        NoAction = False
        Exit Sub
      End If
    End If
    
     If tAPL7A(i - 1).text > "" Then
      If tAPL7A(i).text = "" Then
        addMessage "Please input Article Number of " & lbl7A(i).caption & " !", MESSAGETYPE_WARNING
        tAPL7A(i).SetFocus
        NoAction = False
        Exit Sub
      End If
    End If
  
  Next i
  
  Update_memAPL7a
  
  frmAccessorySetCode.Show 1
  NoAction = False

End Sub

Private Sub tAPL7a_Change(Index As Integer)

  Content = Trim$(tAPL7A(Index).text)
  If Content <> "" Then
    Call CheckContent(7, Content, Index)
    tAPL7A(Index).ForeColor = &H80000008
    If ContentAccepted = False Then
        tAPL7A(Index).ForeColor = &HFF&
        Select Case Index
        Case 1, 2
            cmbAPL7a2(1).Enabled = False
        Case 3, 4
            cmbAPL7a2(2).Enabled = False
        Case 5, 6
            cmbAPL7a2(3).Enabled = False
        End Select
    Else
        Select Case Index
        Case 1, 2
            cmbAPL7a2(1).Enabled = True
        Case 3, 4
            cmbAPL7a2(2).Enabled = True
        Case 5, 6
            cmbAPL7a2(3).Enabled = True
        End Select
    End If
  End If

  If iAccessorySourceDB <> 1 Then
    If Trim(memAPL7a(Index)) = "" And Trim(tAPL7A(Index).text) = "" Then sItemCode(Index) = ""
  End If

  clbCost

End Sub

Private Sub tAPL7a_Click(Index As Integer)

  If iAccessorySourceDB <> 1 Then
    If Trim(tAPL7A(Index).text) = "" Then
        sItemCode(Index) = ""
    End If
  End If

  Content = Trim$(tAPL7A(Index).text)
  If Content <> "" Then
    Call CheckContent(7, Content, Index)
    tAPL7A(Index).ForeColor = &H80000008
    If ContentAccepted = False Then
        tAPL7A(Index).ForeColor = &HFF&
    End If
  End If
  
  AccessoryChangesMade = True
  
  MousePointer = vbDefault
  
End Sub

Private Sub tAPL7A_DblClick(Index As Integer)
' Remove accessory by double-clicking its field.
  Dim code As String

  Select Case Index
  Case 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21  'quantities
    tAPL7A(Index).text = ""
    tAPL7A(Index + 1).text = ""
    If iAccessorySourceDB <> 1 Then
        sItemCode(Index + 1) = ""
    End If

  Case 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22 'article numbers
    If Index = 16 Then
        code = tAPL7A(Index).text
    End If
    tAPL7A(Index).text = ""
    tAPL7A(Index - 1).text = ""
    If iAccessorySourceDB <> 1 Then
        If Index = 16 Then
            RemoveItemFromCableTerminationBoxesByArticleNumber code
        End If
        sItemCode(Index) = ""
    End If
  End Select
  
  'If bushing is removed then then connector is removed too.
  Select Case Index
  Case 1, 2
    cmbAPL7a2(1).listIndex = 0
  Case 3, 4
    cmbAPL7a2(2).listIndex = 0
  Case 5, 6
    cmbAPL7a2(3).listIndex = 0
  End Select

End Sub

Private Sub tAPL7A_GotFocus(Index As Integer)
'Päivittää cmbAccessories-combon ja grdAccessories-gridin valitun varustekentän mukaan.
'Jos tänne tuloa ei ole liipaistu valitsemalla cmbAccessories-listasta käämikytkinsetti (bOLTCsetClicked=True)
'niin valitaan tAPL7A(20)-kentässä olevan tekstin perusteella kumpi kahdesta käämikytkinsetistä näytetään.
  Dim CName As String
  Dim OLTCtxt As String
  Dim i As Integer
  Dim iX As Integer

  Select Case Index
    Case 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22 'vakiokenttien varusteiden lajimerkkikentät
        FocusIndex = Index
        For i = 0 To cmbAccessories.ListCount - 1
            CName = cmbAccessories.List(i)
            iX = InStr(CName, ",")
            If iX > 0 Then CName = Left(CName, (iX - 1))
            If CName = lbl7A(Index) Then
                If iX = 0 Then
                    cmbAccessories.listIndex = i
                Else
                    If Not bOLTCsetClicked Then
                        OLTCtxt = Left((tAPL7A(Index).text & "xxxxx"), 5)
                        If OLTCtxt = OLTCset21 Or OLTCtxt = OLTCset22 Then
                            cmbAccessories.listIndex = i + 1
                        Else
                            cmbAccessories.listIndex = i
                        End If
                    End If
                    bOLTCsetClicked = False
                End If
                Exit For
            End If
        Next i
        OtherGridFocus = False
    Case 1, 3, 4, 7, 9, 11, 13, 15, 17, 19, 21  'vakiokenttien varusteiden kappalemääräkentät
        OtherGridFocus = False
    Case 23                                     'focus muiden varusteiden kenttään
        OtherGridFocus = True
    Case Else
        FocusIndex = 100
        OtherGridFocus = False
  End Select

  BushingFocus = False
  Select Case Index
    Case 2, 4, 6
        BushingFocus = True
  End Select
      
  Screen.MousePointer = vbDefault

End Sub

Public Sub InitOtherGrid()
  Dim ColOffset As Integer
  Dim i As Integer
  Dim RowOffset As Integer
  Dim RowsMax As Integer
  
  RowsMax = 65  'siis varusteiden ja varusteryhmien nimien maksimimäärä!
  
  grdOther.Rows = RowsMax + 1
  grdOther.Cols = 3
  
  For i = 0 To 2
    For RowOffset% = 0 To RowsMax
      ColOffset% = i
      grdOther.row = RowOffset%
      grdOther.Col = ColOffset%
      grdOther.text = ""
    Next RowOffset%
  Next i
  
  grdOther.ColWidth(0) = 300
  grdOther.ColWidth(1) = grdOther.width - 300
  grdOther.ColWidth(2) = 3000

  grdOther.row = 0
  grdOther.Col = 0

End Sub

Public Sub CreateOtherGridLine(rowEntry As Integer)
  Dim CName As String
  Dim iX As Integer
  Dim nCount As Integer
  'Varusteen varusteluokan nimi. Jos kyseessä on käämikytkin niin pitää huomioida että settejä on kaksi,
  'OtherGridLineBufferiin menee niiden yhteinen nimi "On-Load Tap Changer".
  CName = cmbAccessories.text
  iX = InStr(CName, ",")
  If iX > 0 Then CName = Left(CName, (iX - 1))

  nCount = Val(tAPL7A(23))
  If nCount = 0 Then nCount = 1

  OtherGridLineCount = OtherGridLineCount + 1
  grdAccessories.Col = 0
  grdAccessories.row = rowEntry
  OtherGridLineBuffer(OtherGridLineCount, 1) = grdAccessories.text   'varusteen lajimerkki
  grdAccessories.Col = 1
  OtherGridLineBuffer(OtherGridLineCount, 2) = grdAccessories.text   'varusteen Name-kenttä
  OtherGridLineBuffer(OtherGridLineCount, 3) = CName                 'varusteen varusteluokan nimi
  OtherGridLineBuffer(OtherGridLineCount, 4) = FixLIndex(cmbAccessories.listIndex + 1) 'varusteen varusteluokan TDTClass
  OtherGridLineBuffer(OtherGridLineCount, 5) = nCount                'varusteen kappalemäärä
  UpdateOtherGrid

  Update_memAPL7a

End Sub

Public Sub RemoveOtherGridLine(rowEntry As Integer)
  Dim iLineOffset As Integer
  Dim iOffset As Integer
  
  iLineOffset = -1
  
  ' Find line
  For iOffset = 1 To OtherGridLineCount
    If rowEntry = Val(OtherGridLineBuffer(iOffset, 6)) Then
        iLineOffset = iOffset
        If iAccessorySourceDB <> 1 Then sItemCode(24 + ((iOffset - 1) * 5)) = ""
        Exit For
    End If
  Next iOffset

  If iLineOffset = -1 Then Exit Sub
  
  RemoveItemFromCableTerminationBoxes (rowEntry)
    
  ' Remove line from buffer
  If iOffset = OtherGridLineCount Then
    OtherGridLineCount = OtherGridLineCount - 1
    UpdateOtherGrid
    If bRemoveSunRoof = True Then RemoveSunRoof
    Exit Sub
  End If
  
  For iOffset = iLineOffset + 1 To OtherGridLineCount
    OtherGridLineBuffer(iOffset - 1, 1) = OtherGridLineBuffer(iOffset, 1)
    OtherGridLineBuffer(iOffset - 1, 2) = OtherGridLineBuffer(iOffset, 2)
    OtherGridLineBuffer(iOffset - 1, 3) = OtherGridLineBuffer(iOffset, 3)
    OtherGridLineBuffer(iOffset - 1, 4) = OtherGridLineBuffer(iOffset, 4)
    OtherGridLineBuffer(iOffset - 1, 5) = OtherGridLineBuffer(iOffset, 5)
  Next iOffset
  
  OtherGridLineCount = OtherGridLineCount - 1
  UpdateOtherGrid
  If bRemoveSunRoof = True Then RemoveSunRoof
  
  If iAccessorySourceDB <> 1 Then UpdateOtherGridItemCodes

End Sub

Private Sub RemoveItemFromCableTerminationBoxes(rowEntry As Integer)
  Dim code As String
  
  grdOther.Col = 1
  grdOther.row = rowEntry
  code = grdOther.text
  
  Select Case code
    Case CTB_COMMONBOX, CTB_COMMON_CANOEBOX, CTB_SEPERATE_CANOEBOX_HV, CTB_SEPERATE_CANOEBOX_LV, _
          CTB_SEPERATEBOX_HV, CTB_SEPERATEBOX_LV
          
      RemoveItemFromCableTerminationBoxesByArticleNumber code
          
  End Select
   
End Sub

Private Sub RemoveItemFromCableTerminationBoxesByArticleNumber(code As String)
  Dim i As Integer
  
  For i = 1 To UBound(CableTerminationBoxes)
    If CableTerminationBoxes(i) = code Then
        DeleteArrayItem CableTerminationBoxes, i
        Exit For
    End If
  Next i
  
  If UBound(CableTerminationBoxes) = 0 Then
    bRemoveSunRoof = True
    cmbAccessories_Click
  End If

End Sub

Private Sub RemoveSunRoof()
  Dim i As Integer
  
  grdOther.Col = 1
  For i = 0 To grdOther.Rows - 1
    grdOther.row = i
    If grdOther.text = CTB_SUNROOF Then
      grdOther_DblClick
    End If
  Next i
  
  If tAPL7A(16).text = CTB_SUNROOF Then
    tAPL7A(16).SetFocus
    tAPL7A_DblClick (16)
  End If
  
  bRemoveSunRoof = False
  
End Sub

Public Sub UpdateOtherGrid()
  Dim iBufferEmpty As Boolean
  Dim iBufferIndex As Integer
  Dim iRow  As Integer
  Dim sCurrentClass As String

  ' Empty grid
  InitOtherGrid

  If OtherGridLineCount = 0 Then Exit Sub

  For iRow = 1 To OtherGridLineCount
    OtherGridLineBuffer(iRow, 6) = "-1"
  Next iRow

  ' Only one line

  If OtherGridLineCount = 1 Then
    grdOther.Col = 1
    grdOther.row = 0
    grdOther.text = "[ " + OtherGridLineBuffer(1, 3) + " ]"
    grdOther.Col = 0
    grdOther.row = 1
    grdOther.text = OtherGridLineBuffer(1, 5)
    grdOther.Col = 1
    grdOther.text = OtherGridLineBuffer(1, 1)
    grdOther.Col = 2
    grdOther.text = OtherGridLineBuffer(1, 2)
    OtherGridLineBuffer(1, 6) = 1
    Exit Sub
  End If

  ' More than one line
  ' iBufferIndex    Current index in OtherGridLineBuffer
  ' iRow            Current grid row
  ' sCurrentClass   Active class
  
  iBufferEmpty = False
  sCurrentClass = OtherGridLineBuffer(1, 3)
  iBufferIndex = 1
  iRow = 0
  
  Do
  
    grdOther.Col = 1
    grdOther.row = iRow
    grdOther.text = "[ " + OtherGridLineBuffer(iBufferIndex, 3) + " ]"
    iRow = iRow + 1
    If grdOther.Rows < iRow + 1 Then grdOther.Rows = iRow + 1
    DoEvents
  
    For iBufferIndex = 1 To OtherGridLineCount
      If (OtherGridLineBuffer(iBufferIndex, 3) = sCurrentClass) And (Val(OtherGridLineBuffer(iBufferIndex, 6)) = -1) Then
        grdOther.row = iRow
        grdOther.Col = 0
        grdOther.text = OtherGridLineBuffer(iBufferIndex, 5)
        grdOther.Col = 1
        grdOther.text = OtherGridLineBuffer(iBufferIndex, 1)
        grdOther.Col = 2
        grdOther.text = OtherGridLineBuffer(iBufferIndex, 2)
        OtherGridLineBuffer(iBufferIndex, 6) = str$(iRow)
        iRow = iRow + 1
        If grdOther.Rows < iRow + 1 Then grdOther.Rows = iRow + 1
      End If
      DoEvents
    Next iBufferIndex
    
    iBufferEmpty = True
    
    For iBufferIndex = 1 To OtherGridLineCount
      If Val(OtherGridLineBuffer(iBufferIndex, 6)) = -1 Then
        sCurrentClass = OtherGridLineBuffer(iBufferIndex, 3)
        iBufferEmpty = False
        Exit For
      End If
    Next iBufferIndex
  
  Loop Until iBufferEmpty = True

End Sub

Private Sub tAPL7A_LostFocus(Index As Integer)

  Content = Trim$(tAPL7A(Index).text)
  If Content <> "" Then
    Call CheckContent(7, Content, Index)
    tAPL7A(Index).ForeColor = &H80000008
    If ContentAccepted = False Then
        tAPL7A(Index).ForeColor = &HFF&
        tAPL7A(Index).SetFocus
    End If
  Else
    If iAccessorySourceDB <> 1 Then
        sItemCode(Index) = ""
    End If
  End If

End Sub

Public Sub AccessorySetCostCalculation()
'laskee näytöllä olevan varustesetin kustannukset kenttään panAPL7A(1)
  Dim iBufferIndex As Integer
  Dim iRow As Integer
  Dim iBufferEmpty As Boolean
  Dim sCurrentClass As String

  AccessorySetCost = 0

  '1. bushing
  If Len(tAPL7A(2)) > 0 Then
    Accessory.Class = "1"
    Accessory.Qty = Val(tAPL7A(1))
    Accessory.code = tAPL7A(2)
    If iAccessorySourceDB <> 1 Then
        Accessory.ItemCode = sItemCode(2)
        GetAccessoryData2 Accessory
    Else
        GetAccessoryData Accessory
    End If
    AccessorySetCost = AccessorySetCost + (Accessory.DirectMaterial + Accessory.TotalLaborCost) * Accessory.Qty
  End If

  '2. bushing
  If Len(tAPL7A(4)) > 0 Then
    Accessory.Class = "1"
    Accessory.Qty = Val(tAPL7A(3))
    Accessory.code = tAPL7A(4)
    If iAccessorySourceDB <> 1 Then
        Accessory.ItemCode = sItemCode(4)
        GetAccessoryData2 Accessory
    Else
        GetAccessoryData Accessory
    End If
    AccessorySetCost = AccessorySetCost + (Accessory.DirectMaterial + Accessory.TotalLaborCost) * Accessory.Qty
  End If

  '3. bushing
  If Len(tAPL7A(6)) > 0 Then
    Accessory.Class = "1"
    Accessory.Qty = Val(tAPL7A(5))
    Accessory.code = tAPL7A(6)
    If iAccessorySourceDB <> 1 Then
        Accessory.ItemCode = sItemCode(6)
        GetAccessoryData2 Accessory
    Else
        GetAccessoryData Accessory
    End If
    AccessorySetCost = AccessorySetCost + (Accessory.DirectMaterial + Accessory.TotalLaborCost) * Accessory.Qty
  End If

  'connector 1 (bushing)
  If Len(cmbAPL7a2(1)) > 0 Then
    Accessory.Class = "1"
    Accessory.Qty = Val(tAPL7A(1))
    Accessory.code = cmbAPL7a2(1)
    If iAccessorySourceDB <> 1 Then
        Accessory.ItemCode = sItemCodea2(1)
        GetAccessoryData2 Accessory
    Else
        GetAccessoryData Accessory
    End If
    AccessorySetCost = AccessorySetCost + (Accessory.DirectMaterial + Accessory.TotalLaborCost) * Accessory.Qty
  End If

  'connector 2 (bushing)
  If Len(cmbAPL7a2(2)) > 0 Then
    Accessory.Class = "1"
    Accessory.Qty = Val(tAPL7A(3))
    Accessory.code = cmbAPL7a2(2)
    If iAccessorySourceDB <> 1 Then
        Accessory.ItemCode = sItemCodea2(2)
        GetAccessoryData2 Accessory
    Else
        GetAccessoryData Accessory
    End If
    AccessorySetCost = AccessorySetCost + (Accessory.DirectMaterial + Accessory.TotalLaborCost) * Accessory.Qty
  End If

  'connector 3 (bushing)
  If Len(cmbAPL7a2(3)) > 0 Then
    Accessory.Class = "1"
    Accessory.Qty = Val(tAPL7A(5))
    Accessory.code = cmbAPL7a2(3)
    If iAccessorySourceDB <> 1 Then
        Accessory.ItemCode = sItemCodea2(3)
        GetAccessoryData2 Accessory
    Else
        GetAccessoryData Accessory
    End If
    AccessorySetCost = AccessorySetCost + (Accessory.DirectMaterial + Accessory.TotalLaborCost) * Accessory.Qty
  End If

  'silicagel breather
  If Len(tAPL7A(8)) > 0 Then
    Accessory.Class = "2"
    Accessory.Qty = Val(tAPL7A(7))
    Accessory.code = tAPL7A(8)
    If iAccessorySourceDB <> 1 Then
        Accessory.ItemCode = sItemCode(8)
        GetAccessoryData2 Accessory
    Else
        GetAccessoryData Accessory
    End If
    AccessorySetCost = AccessorySetCost + (Accessory.DirectMaterial + Accessory.TotalLaborCost) * Accessory.Qty
  End If

  'oil level indicator
  If Len(tAPL7A(10)) > 0 Then
    Accessory.Class = "3"
    Accessory.Qty = Val(tAPL7A(9))
    Accessory.code = tAPL7A(10)
    If iAccessorySourceDB <> 1 Then
        Accessory.ItemCode = sItemCode(10)
        GetAccessoryData2 Accessory
    Else
        GetAccessoryData Accessory
    End If
    AccessorySetCost = AccessorySetCost + (Accessory.DirectMaterial + Accessory.TotalLaborCost) * Accessory.Qty
  End If

  'buchholz relay
  If Len(tAPL7A(12)) > 0 Then
    Accessory.Class = "4"
    Accessory.Qty = Val(tAPL7A(11))
    Accessory.code = tAPL7A(12)
    If iAccessorySourceDB <> 1 Then
        Accessory.ItemCode = sItemCode(12)
        GetAccessoryData2 Accessory
    Else
        GetAccessoryData Accessory
    End If
    AccessorySetCost = AccessorySetCost + (Accessory.DirectMaterial + Accessory.TotalLaborCost) * Accessory.Qty
  End If

  'oil thermometer
  If Len(tAPL7A(14)) > 0 Then
    Accessory.Class = "5"
    Accessory.Qty = Val(tAPL7A(13))
    Accessory.code = tAPL7A(14)
    If iAccessorySourceDB <> 1 Then
        Accessory.ItemCode = sItemCode(14)
        GetAccessoryData2 Accessory
    Else
        GetAccessoryData Accessory
    End If
    AccessorySetCost = AccessorySetCost + (Accessory.DirectMaterial + Accessory.TotalLaborCost) * Accessory.Qty
  End If

  'terminal box
  If Len(tAPL7A(16)) > 0 Then
    Accessory.Class = "6"
    Accessory.Qty = Val(tAPL7A(15))
    Accessory.code = tAPL7A(16)
    If iAccessorySourceDB <> 1 Then
        Accessory.ItemCode = sItemCode(16)
        GetAccessoryData2 Accessory
    Else
        GetAccessoryData Accessory
    End If
    AccessorySetCost = AccessorySetCost + (Accessory.DirectMaterial + Accessory.TotalLaborCost) * Accessory.Qty
 End If

  'base rollers
  If Len(tAPL7A(18)) > 0 Then
    Accessory.Class = "7"
    Accessory.Qty = Val(tAPL7A(17))
    Accessory.code = tAPL7A(18)
    If iAccessorySourceDB <> 1 Then
        Accessory.ItemCode = sItemCode(18)
        GetAccessoryData2 Accessory
    Else
        GetAccessoryData Accessory
    End If
    AccessorySetCost = AccessorySetCost + (Accessory.DirectMaterial + Accessory.TotalLaborCost) * Accessory.Qty
  End If

  'on-load tap changer
  If Len(tAPL7A(20)) > 0 Then
    Accessory.Class = "8"
    Accessory.Qty = Val(tAPL7A(19))
    Accessory.code = tAPL7A(20)
    If iAccessorySourceDB <> 1 Then
        Accessory.ItemCode = sItemCode(20)
        GetAccessoryData2 Accessory
    Else
        GetAccessoryData Accessory
    End If
    AccessorySetCost = AccessorySetCost + (Accessory.DirectMaterial + Accessory.TotalLaborCost) * Accessory.Qty
  End If

  'motor drive unit
  If Len(tAPL7A(22)) > 0 Then
    Accessory.Class = "9"
    Accessory.Qty = Val(tAPL7A(21))
    Accessory.code = tAPL7A(22)
    If iAccessorySourceDB <> 1 Then
        Accessory.ItemCode = sItemCode(22)
        GetAccessoryData2 Accessory
    Else
        GetAccessoryData Accessory
    End If
    AccessorySetCost = AccessorySetCost + (Accessory.DirectMaterial + Accessory.TotalLaborCost) * Accessory.Qty
  End If
  
  If OtherGridLineCount = 0 Then
    panAPL7A(1).caption = Format(AccessorySetCost, "0") & " "
    Exit Sub
  End If

  'Other-gridissä on myös varusteita. Täällä pitää käyttää saraketta 4 koska sarake 6 on varattu grdOtherin
  'rivinumeroille joita tarvitaan mm. grdOther_DblClickissä.
  For iRow = 1 To OtherGridLineCount
    OtherGridLineBuffer(iRow, 4) = "-1"
  Next iRow
    
  ' Only one line
  
  If OtherGridLineCount = 1 Then
    Accessory.Class = OtherGridLineBuffer(1, 3)
    Accessory.Qty = Val(OtherGridLineBuffer(1, 5))
    Accessory.code = OtherGridLineBuffer(1, 1)
    If iAccessorySourceDB <> 1 Then
        Accessory.ItemCode = sItemCode(24)
        GetAccessoryData2 Accessory
    Else
        GetAccessoryData Accessory
    End If
    AccessorySetCost = AccessorySetCost + (Accessory.DirectMaterial + Accessory.TotalLaborCost) * Accessory.Qty
    panAPL7A(1).caption = Format(AccessorySetCost, "0") & " "
    Exit Sub
  End If
  
  ' More than one line
  ' iBufferIndex    Current index in OtherGridLineBuffer
  ' iRow            Current grid row
  ' sCurrentClass   Active class
  
  iBufferEmpty = False
  sCurrentClass = OtherGridLineBuffer(1, 3)
  iBufferIndex = 1
  iRow = 0
  
  Do
    DoEvents
  
    For iBufferIndex = 1 To OtherGridLineCount
        If (OtherGridLineBuffer(iBufferIndex, 3) = sCurrentClass) And (Val(OtherGridLineBuffer(iBufferIndex, 4)) = -1) Then
            Accessory.Class = OtherGridLineBuffer(iBufferIndex, 3)
            Accessory.Qty = Val(OtherGridLineBuffer(iBufferIndex, 5))
            Accessory.code = OtherGridLineBuffer(iBufferIndex, 1)
            If iAccessorySourceDB <> 1 Then
                Accessory.ItemCode = sItemCode(23 + ((iBufferIndex - 1) * 5) + 1)
                GetAccessoryData2 Accessory
            Else
                GetAccessoryData Accessory
            End If
            AccessorySetCost = AccessorySetCost + (Accessory.DirectMaterial + Accessory.TotalLaborCost) * Accessory.Qty
            OtherGridLineBuffer(iBufferIndex, 4) = "0"
        End If
        DoEvents
    Next iBufferIndex
    
    iBufferEmpty = True
    
    For iBufferIndex = 1 To OtherGridLineCount
        If Val(OtherGridLineBuffer(iBufferIndex, 4)) = -1 Then
            sCurrentClass = OtherGridLineBuffer(iBufferIndex, 3)
            iBufferEmpty = False
            Exit For
        End If
    Next iBufferIndex
  
  Loop Until iBufferEmpty = True
  
  panAPL7A(1).caption = Format(AccessorySetCost, "0") & " "

End Sub

Private Sub FillConnectorCombos2()
'Lukee läpivientien liittimet MDS-kannasta.
  Dim sSqlquery As String
  Dim sTemp As String
  Dim i As Integer
  Dim AccessoriesSet As DAO.Recordset
  Dim AccessoriesSetADO As ADODB.Recordset
  
  sTemp = cmbAPL7a2(1).text
  cmbAPL7a2(1).Clear
  cmbAPL7a2(1).text = sTemp
  
  sTemp = cmbAPL7a2(2).text
  cmbAPL7a2(2).Clear
  cmbAPL7a2(2).text = sTemp
  
  sTemp = cmbAPL7a2(3).text
  cmbAPL7a2(3).Clear
  cmbAPL7a2(3).text = sTemp
  
  'load connectors ========================================
  sSqlquery = "SELECT * From item Where TDTClass = '1' and " & _
                    "(articlenumberlocal2 LIKE 'KANL-AF*' or " & _
                    "articlenumberlocal2 LIKE 'KANL-DP*' or " & _
                    "articlenumberlocal2 LIKE 'KANL-DR*' or " & _
                    "articlenumberlocal2 LIKE 'KANL-EP*' or " & _
                    "articlenumberlocal2 LIKE 'KANL-ER*' or " & _
                    "articlenumberlocal2 LIKE 'KANL-FP*' or " & _
                    "articlenumberlocal2 LIKE 'KANL-FR*' or " & _
                    "articlenumberlocal2 LIKE 'KANL-DIN*' or " & _
                    "articlenumberlocal2 LIKE 'MTSD *' or " & _
                    "articlenumberlocal2 LIKE 'NLRLZK *') " & _
                    "order by ArticleNumberlocal2"
                       
  If useSQLServer = True Or useAccessADO = True Then  'sql

    sSqlquery = Left(sSqlquery, 9) & Replace(sSqlquery, "*", "%", 10)
    Set AccessoriesSetADO = New ADODB.Recordset
    AccessoriesSetADO.Open sSqlquery, dbLDTNetADO
    
    On Error Resume Next
    AccessoriesSetADO.MoveFirst
    For i = 1 To 3
        cmbAPL7a2(i).AddItem "<Empty>"
    Next i
    On Error GoTo 0
    
    Do Until AccessoriesSetADO.EOF
        For i = 1 To 3
            Select Case cmbViewMode.listIndex
            Case 0
                cmbAPL7a2(i).AddItem is_null(AccessoriesSetADO("ArticleNumber"))
            Case 1
                cmbAPL7a2(i).AddItem is_null(AccessoriesSetADO("ArticleNumberLocal1"))
            Case 2
                cmbAPL7a2(i).AddItem is_null(AccessoriesSetADO("ArticleNumberLocal2"))
            Case 3
                cmbAPL7a2(i).AddItem is_null(AccessoriesSetADO("Description"))
            End Select
        Next i
        ReDim Preserve sConnectorCodes(cmbAPL7a2(1).ListCount)
        sConnectorCodes(cmbAPL7a2(1).ListCount - 1) = AccessoriesSetADO("Code")
        AccessoriesSetADO.MoveNext
    Loop
    
    AccessoriesSetADO.Close
    Set AccessoriesSetADO = Nothing
    
  Else  'access
  
    If WDBconn <> "" Then
        sSqlquery = Left(sSqlquery, 9) & Replace(sSqlquery, "*", "%", 10)
        Set AccessoriesSet = dbLDTNet.OpenRecordset(sSqlquery, dbOpenDynaset, dbSQLPassThrough)
    Else
        Set AccessoriesSet = dbLDTNet.OpenRecordset(sSqlquery, dbOpenDynaset)
    End If
    
    On Error Resume Next
    AccessoriesSet.MoveFirst
    For i = 1 To 3
        cmbAPL7a2(i).AddItem "<Empty>"
    Next i
    On Error GoTo 0
    
    Do Until AccessoriesSet.EOF
        For i = 1 To 3
            Select Case cmbViewMode.listIndex
            Case 0
                cmbAPL7a2(i).AddItem is_null(AccessoriesSet("ArticleNumber"))
            Case 1
                cmbAPL7a2(i).AddItem is_null(AccessoriesSet("ArticleNumberLocal1"))
            Case 2
                cmbAPL7a2(i).AddItem is_null(AccessoriesSet("ArticleNumberLocal2"))
            Case 3
                cmbAPL7a2(i).AddItem is_null(AccessoriesSet("Description"))
            End Select
        Next i
        ReDim Preserve sConnectorCodes(cmbAPL7a2(1).ListCount)
        sConnectorCodes(cmbAPL7a2(1).ListCount - 1) = AccessoriesSet("Code")
        AccessoriesSet.MoveNext
    Loop
    
    AccessoriesSet.Close
    Set AccessoriesSet = Nothing
  
  End If

End Sub

Public Sub addMessage(messageText As String, Optional messageType As Integer = MESSAGETYPE_NOICON)
  
  DoEvents
  
  If fxgrdMessagesA.Rows < nCurrentMessageRowA + 1 Then
    fxgrdMessagesA.Rows = nCurrentMessageRowA + 1
  End If
  
  fxgrdMessagesA.row = nCurrentMessageRowA
  If messageType = MESSAGETYPE_INFO Then
    Set fxgrdMessagesA.CellPicture = infoPic
  ElseIf messageType = MESSAGETYPE_WARNING Then
    Set fxgrdMessagesA.CellPicture = warningPic
  ElseIf messageType = MESSAGETYPE_ERROR Then
    Set fxgrdMessagesA.CellPicture = errorPic
  End If
  
  messageText = "      " & messageText
  fxgrdMessagesA.text = messageText
 
  nCurrentMessageRowA = nCurrentMessageRowA + 1
  
End Sub

Private Sub ClearMessages()
  
  fxgrdMessagesA.Clear
  fxgrdMessagesA.Rows = 2
  nCurrentMessageRowA = 0
  fxgrdMessagesA.ColWidth(0) = fxgrdMessagesA.width

End Sub

Private Function FixLIndex(TDTC As Integer) As String
'Koska cmbAccessories sisältää kaksi käämikytkinsettiä niin kaikkien varusteiden TDTClass ei ole suoraan cmbAccessories.listIndex+1.
'Palauttaa oikean TDTClassin.

  If TDTC < 9 Then
    FixLIndex = Trim(str(TDTC))
  Else
    FixLIndex = Trim(str(TDTC - 1))
  End If

End Function

